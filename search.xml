<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>四毛子算法学习笔记</title>
      <link href="/2023/09/10/%E5%9B%9B%E6%AF%9B%E5%AD%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/10/%E5%9B%9B%E6%AF%9B%E5%AD%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>“***，你会四毛子算法吗？不会的话就去学会，给同学们讲讲”</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>四毛子算法 (Four Russian) 是一个由四位俄罗斯人<del>毛子</del>提出的一种可以在 $O(n \log \log n) - O(1)$ 复杂度内解决RMQ问题的算法。</p><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><p>首先把序列分块，对于每块内部维护一个ST表，对于不同的块之间再维护一个ST表。</p><p>每次查询一个 $[l,r]$ 的时候:</p><p>假设l所在的区间为 $[l_1,r_1]$ ，r所在的区间为 $[l_2,r_2]$。</p><p>若l和r处于同一块内，直接查询块内的ST表即可。</p><p>若l和r处于相邻块内，则直接查询 $[l,r_1]$ 和 $[l_2,r]$ 的最小值即可。</p><p>否则，我们把区间 $[l,r]$ 分成三段：</p><p>1: $[l,r_1]$</p><p>2: $[r_1+1,l_2-1]$</p><p>3: $[l_2,r]$</p><p>其中第二个区间直接查询不同块之间的ST表，第一个和第三个区间块内查询即可。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>查询复杂度显然为 $O(1)$。</p><p>设块长为k，则有预处理复杂度：</p><p>$$O(\frac{n}{k} \log \frac{n}{k}+n \log k)$$</p><p>我们取 $k&#x3D;\log n$ ，就得到了复杂度 $O(n \log \log n)$ 。</p><p>空间复杂度也为 $O(n \log \log n)$ 。</p><h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><p>我们发现原版四毛子算法的常数非常大，因为每次询问可能要跑3个ST表。</p><p>考虑改进这个过程。我们发现块内查询相当于查询前缀&#x2F;后缀最小值，所以我们在预处理的过程中，对于每个块暴力预处理出它们的前缀和后缀min。这样询问只需要跑一个ST表，常数大大减小。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>真不难写(逃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,blo,tot,lc[<span class="number">1000005</span>],rc[<span class="number">1000005</span>],bel[<span class="number">1000005</span>],a[<span class="number">1000005</span>],log1[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">log1[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;++i)log1[i]=log1[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">blo=log1[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i*blo&lt;=n;++i)lc[++tot]=blo*(i<span class="number">-1</span>)+<span class="number">1</span>,rc[tot]=blo*i;</span><br><span class="line"><span class="keyword">if</span>(n%blo)&#123;</span><br><span class="line"><span class="type">int</span> tmp=n/blo;</span><br><span class="line">lc[++tot]=tmp*blo+<span class="number">1</span>,rc[tot]=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=lc[i];j&lt;=rc[i];++j)bel[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stable</span>&#123;</span><br><span class="line"><span class="type">int</span> f[<span class="number">18</span>][<span class="number">18</span>],lf[<span class="number">18</span>],rf[<span class="number">18</span>],len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">len=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(lf,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> lf);</span><br><span class="line"><span class="built_in">memset</span>(rf,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> rf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)f[i][<span class="number">0</span>]=a[l+i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)lf[i]=<span class="built_in">min</span>(lf[i<span class="number">-1</span>],f[i][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;=<span class="number">1</span>;--i)rf[i]=<span class="built_in">min</span>(rf[i+<span class="number">1</span>],f[i][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askm</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=log1[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(f[l][x],f[r-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askl</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> lf[r];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askr</span><span class="params">(<span class="type">int</span> l)</span></span>&#123;<span class="keyword">return</span> rf[l];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;<span class="number">1</span>||r&gt;len||l&gt;r)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">1</span>)<span class="keyword">return</span> <span class="built_in">askl</span>(r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r==len)<span class="keyword">return</span> <span class="built_in">askr</span>(l);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">askm</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st_table</span>&#123;</span><br><span class="line">stable s[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> len,f[<span class="number">100005</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">len=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)s[i].<span class="built_in">init</span>(lc[i],rc[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)f[i][<span class="number">0</span>]=s[i].<span class="built_in">ask</span>(<span class="number">1</span>,s[i].len);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=bel[l],y=bel[r],z=log1[y-x<span class="number">-1</span>],ansl=<span class="number">1e9</span>,ansr;</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> s[x].<span class="built_in">ask</span>(l-lc[x]+<span class="number">1</span>,r-lc[x]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(x!=y<span class="number">-1</span>)ansl=<span class="built_in">min</span>(f[x+<span class="number">1</span>][z],f[y-(<span class="number">1</span>&lt;&lt;z)][z]);</span><br><span class="line">ansr=<span class="built_in">min</span>(s[x].<span class="built_in">ask</span>(l+s[x].len-rc[x],s[x].len),s[y].<span class="built_in">ask</span>(<span class="number">1</span>,r-lc[y]+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(ansl,ansr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">s.<span class="built_in">init</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="type">int</span> l,r;cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">cout&lt;&lt;s.<span class="built_in">ask</span>(l,r)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>请注意，该四毛子算法常数仍然巨大，不保证可以通过模板题(但是loj的过了而且比ST表快</p>]]></content>
      
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我会且仅会的东西</title>
      <link href="/2023/09/10/%E6%88%91%E4%BC%9A%E4%B8%94%E4%BB%85%E4%BC%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>/2023/09/10/%E6%88%91%E4%BC%9A%E4%B8%94%E4%BB%85%E4%BC%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>1、<strong>最基础的</strong>骗分方法</p><p>2、<strong>最基础、最低效、最低正确率的</strong>乱搞方法</p><p>3、<strong>最低效的</strong>打表方法</p><p>4、<strong>最龟速的</strong>找规律方法</p><p>5、<strong>笨得甚至不像黑科技的</strong>科技</p><p>6、摆摆摆</p>]]></content>
      
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发电站</title>
      <link href="/2023/09/10/%E5%8F%91%E7%94%B5%E7%AB%99/"/>
      <url>/2023/09/10/%E5%8F%91%E7%94%B5%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="bd43707ed602d4741007eebbeda6df585e84ba65cef89b62150d20209526cb3b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。也许是不可告人的东西?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> GOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about-me</title>
      <link href="/2023/09/10/about-me/"/>
      <url>/2023/09/10/about-me/</url>
      
        <content type="html"><![CDATA[<h1 id="JZX102624的博客"><a href="#JZX102624的博客" class="headerlink" title="JZX102624的博客"></a>JZX102624的博客</h1><p><del><strong>站长是个发电机！</strong></del></p><p>站长刚搭好的博客。(on 2023&#x2F;8&#x2F;27)</p><p>会放一些平时没有的发电内容。如果你真的通过搜索找到了这里，那你很厉害<del>这意味着你可以浪费时间看我发电了</del>。</p><p>一般来说个人博客的内容严格多于<a href="luogu.com.cn/blog/JZX102624">洛谷博客</a>。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
