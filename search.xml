<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>犯过的弱智错误</title>
      <link href="/2023/10/01/%E7%8A%AF%E8%BF%87%E7%9A%84%E5%BC%B1%E6%99%BA%E9%94%99%E8%AF%AF/"/>
      <url>/2023/10/01/%E7%8A%AF%E8%BF%87%E7%9A%84%E5%BC%B1%E6%99%BA%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>1、一定要看清楚要不要加文件，要加的文件后缀名。</p><p>2、一定要看清楚数据范围，要不要开<code>long long</code>、<code>long double</code>、<code>__int128</code>，同时一定不要开小或者开大数组。推荐的方案是 $O(n)$ 算法无脑开 $10^6$，$O(n \log n)$ 算法至少开到 $3*10^5$。</p><p>3、注意输入格式。先输入<code>n</code>还是<code>m</code>？</p><p>4、测试速度的时候要开<code>-Ofast</code>。</p><p>5、在不确定程序能否正常运行的地方加<code>assert</code>。</p><p>6、交程序之前记得用<code>-fsanitize=address,undefined</code>测试一遍，然而用这个编译选项时执行效率会大大降低。</p><h2 id="7、请注意输入中不保证lr你需要交换l和r"><a href="#7、请注意输入中不保证lr你需要交换l和r" class="headerlink" title="7、请注意输入中不保证l&lt;&#x3D;r，如果l&gt;r你需要交换l和r"></a>7、请注意输入中不保证l&lt;&#x3D;r，如果l&gt;r你需要交换l和r</h2><p>8、写乱搞的时候注意卡时，不要卡错了。</p><p>9、当你在这道题上完全卡住的时候，不如去前面的题写几个拍子。</p><p>10、先把所有的题看一遍，确定哪道最可做。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客维护记录</title>
      <link href="/2023/09/30/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/30/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-9-30"><a href="#2023-9-30" class="headerlink" title="2023&#x2F;9&#x2F;30"></a>2023&#x2F;9&#x2F;30</h2><p>添加了对<code>categories</code>的支持。本博客已经完全修复。</p><h2 id="2023-9-29"><a href="#2023-9-29" class="headerlink" title="2023&#x2F;9&#x2F;29"></a>2023&#x2F;9&#x2F;29</h2><p>添加了博客文章的字数统计和预估阅读时长的功能。</p><h2 id="2023-9-16"><a href="#2023-9-16" class="headerlink" title="2023&#x2F;9&#x2F;16"></a>2023&#x2F;9&#x2F;16</h2><p>添加了对<code>tags</code>和<code>archives</code>的支持。</p><h2 id="2023-9-10"><a href="#2023-9-10" class="headerlink" title="2023&#x2F;9&#x2F;10"></a>2023&#x2F;9&#x2F;10</h2><p>修复了这个删库跑路次数极多的博客，搬迁到了<code>github</code>上。</p><p>添加了密码设置，造好了发电站。</p>]]></content>
      
      
      <categories>
          
          <category> 维护记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维护记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我和Chaoswither</title>
      <link href="/2023/09/26/%E5%85%B3%E4%BA%8E%E6%88%91%E5%92%8CChaoswither/"/>
      <url>/2023/09/26/%E5%85%B3%E4%BA%8E%E6%88%91%E5%92%8CChaoswither/</url>
      
        <content type="html"><![CDATA[<p>最近有人开始磕我跟Chaoswither的CP组合。（雾</p><p>其实但凡稍微认识我的人就不会犯这种逆天错误。</p>]]></content>
      
      
      <categories>
          
          <category> info </category>
          
      </categories>
      
      
        <tags>
            
            <tag> info </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷-P6982[NEERC2015]Jump-题解</title>
      <link href="/2023/09/26/%E6%B4%9B%E8%B0%B7-P6982-NEERC2015-Jump-%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/09/26/%E6%B4%9B%E8%B0%B7-P6982-NEERC2015-Jump-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>好题。</p><p>题意：</p><p>给定长度为 $n$（$n$ 为偶数） 的 01 字符串 $S$。</p><p>你可以向交互库进行询问。你可以向交互库输出一个长度为 $n$ 的 01 字符串 $Q$。设 $S$ 和 $Q$ 有 $k$ 个对应的位置上的字符相同。若 $k&#x3D;n$ 或 $k&#x3D;\frac n 2$，则交互库将返回 $k$，否则交互库将返回 $0$。</p><p>你最多向交互库询问 $n+500$ 次，要求求出 $S$。你只需要使最后一次询问的返回值为 $n$ 即可。此时你应立即结束程序，否则将得到不可预料的结果。</p><p>若你的字符串长度不为 $n$ 或出现 01 以外的字符，或者你的询问次数超过上限，则交互库会返回 $-1$。此时你应立即结束程序，否则将得到不可预料的结果。</p><p>$1\leq n\leq 1000$。</p><p>（我抄的题面）</p><p>你考虑如果已经确定了一个相同个数为 $k&#x3D;\frac n 2$ 个的字符串会怎么做。</p><p>你考虑每次把第一个数和另外一个数一起反转。如果相同个数仍然为 $k&#x3D;\frac n 2$，那么显然第一个数和另外一个数必然一个对一个错。我们这样询问 $1$ 和其他每一个位置，就能够得到包含所有位置的两个正确性相反的集合。然后，我们将这个得到的 $01$ 串和取反后的串询问，找到正确的输出即可。</p><p>这部分的次数显然是 $n$ 个。</p><p>考虑如何确定一个相同个数为 $k&#x3D;\frac n 2$ 个的字符串。</p><p>首先，我们设一个全<code>0</code>​串，每次修改最左边的<code>0</code>为<code>1</code>，在这 $n$ 次询问中，肯定能找到一个相同个数为 $k&#x3D;\frac n 2$ 的字符串。</p><p>你考虑他为啥是对的，如果全为0的时候有大于 $k&#x3D;\frac n 2$ 个位置是对的，那么你变成全1的时候，有小于 $k&#x3D;\frac n 2$ 个位置是对的。因为每次 $k$ 的变化最多为1，所以总会有一个串满足相同个数 $k&#x3D;\frac n 2$。</p><p>然后我们得到了一个询问次数 $2n$ 的算法。然而你过不了嘛，必须优化。</p><p>你考虑如何在 $500$ 次内解决战斗。你考虑一开始确定一个相同个数为 $k&#x3D;\frac n 2$ 个的字符串的时候，你随机选择位置，这样被卡的概率就会大大降低。</p><p>更精确地，每次随机选择的正确率是：$\frac{n \choose{\frac n 2}}{2^n}$。当 $n&#x3D;1000$时，取随机次数为 $499$，此时它的正确率大于 $0.999$。</p><p>这样我们就得到了一个次数为 $n+500$ 的算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> s[<span class="number">1005</span>],ans[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">500</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)s[j]=<span class="built_in">rd</span>()%<span class="number">2</span>,cout&lt;&lt;s[j];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span>(m==n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m==n/<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[<span class="number">1</span>]=s[<span class="number">1</span>],s[<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        s[i]^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;s[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;m;s[i]^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(m==n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ans[i]=s[i]^(m==n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;ans[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(m==n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans[i]^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;ans[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱搞problems，但是校内</title>
      <link href="/2023/09/24/%E4%B9%B1%E6%90%9Eproblems%EF%BC%8C%E4%BD%86%E6%98%AF%E6%A0%A1%E5%86%85/"/>
      <url>/2023/09/24/%E4%B9%B1%E6%90%9Eproblems%EF%BC%8C%E4%BD%86%E6%98%AF%E6%A0%A1%E5%86%85/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="73dfb2184493d5cd3aa4ae3609d27eb851d2d0c340a6e6958eec76510b89489c">566fd306bb9665898cbc306eaf7e4cdb51cb474d0235814da3e0cef19f4c95c22b7ee61aa6a76e59ca634dd53a5ee101b098864efd4cfbf12b49325a6b3aee6696204ce5dac89d02b77b08ad9c5cdd1760d037d031ed0c2725acd8451ea8a8b24baf4078b2dba69284a11a434f0e476d386bb05bf6d7019bc1090720d2256644e46febf111b07380936228cb2a41fa8c0d2f7e391cbd861e993d17ce297f26e232009a744bf715512a58dace0e89c22a966d04c82316b3f269a5cce09de61d70f34f1cb4184714eed719ac235b702881e94642b3a1a3347816df76bdc22a80383e372d4d9afdd65cabad91523b9259ea86fbaac2c6120eb2a1e360b60c1b9f6f13aa542d1b2b8ca142cbf912d0a5a1b4758dacecb43d1221d4c3b618071b5ccdde15c8c0d26f9389ef4863a1919380fc90b68415abd44dc69ee16a68a17fad62cfb30eda4f6e387e89dca3734b5e245f2fcc68483024f5f57fa325041e959f7e7984f12124ca04abfbc1c0c01dcb9f5c6cb1d1855ac97b6d41fc802ed083d2927388f6141dfd3958a066678dbf102845835ad396ed5dfbb4f3a6585d94f37ed7e64644dd4a42d67c51b0485a9603720192ad2e3c23f092f464c2aa7c736f5fe6fba30bfc401b62752ec61a57ea3059497b4c6101e0aa386ba92b8d43afe106e4ff10b43ffa985cf8004a23aa0b761db7715a6bdbd3dd0a09cbc411cb717750e977e56086481b1f7b1436bdcdf77f473dc1b3dc3d830f3790cbd597aa891b7fdaf912785bb3184e046fa97187cbda230d0a01e8791317af62a55df5c28f2f3bad2b025ca02fe04362a11e6c404c1607ae7133ba08231e434f5b64d886af4116a4f1e4b43d9bd92ee17d4d1e26c56866949f3bbc961f6fa67cfcc2390bd2c94eda14d9ac60716f8ed8b0e904f27f4abcd2b8a04544971d967a63764dbfb0fc91c962c5b00ad5fcd98d1e5720c6c429a06a48b8c1669467b52b8ae5c172667119450ea951a44436ab34a2eef6d417e7eab97d667338047e3e3f2f240ab92edf18d5cc37771a2378aaf9331104b46c0889ec82967483801f98704311191ca9c3f9c3d685620a70a3d6dd548abd11fe49597ee2d8bb011aba27bbd522f635f4d2da8565f49e55a12b13029b9f07cacd53d16063cb780d796072461d7fe7edbc56f98a9de9dc5416fa4a820f2bad83e9edf408cfc58c89bc80aef9b2515103b21c20660db374103684027867a27ae8024d757baec87921c09cddaea0abf580a848832754e78d3b3dd0a8ae6529f8a8e0ac4f985f0ead97fb879a7e5b38867c93c7ca4590aab1abeb685bd68ef6e4ead4803e8b0141c2ad69b7b561ce0a7372a56aa0c9ea55624367efb4477c074887796df3fe62a4091d1a92809dd5a876fe551ccb6f0845dd8559e2f02dff08a1d9793942d575b6e45517dc18ef397beddbff398060a4437488b8bbeb3578054de5ef14c8f99a5dde57014acd6b5bd7941c33b8fb01217f6802662a7da53ee56d2f80cbad3641932ae26ec47758edf8587509c0d8e359aaff65f53799e5af0f23a21aeb5b17e2057c561661169efa7684c5afd9432e257b21af2d23b7568db26ee379d1b6f97de5ec65e25194d2f87d3ae7335d504d4ce8666724f6ba10863f0994c4daba517ea35c1c6402c5cb5c9150ed50951dd2423d415a7b124d574a1f3a58bd48e22192d89bf2054649a93ebea26f2875db26dcf0a7ba85a55edd3bef864af5747da556d0b6db8ba5a497c115a379bf3ef75ac0b7fe7bf5747b2b9fa293abc49b1ea49952435460d49f102a8ab468a6a5b5927a31404461e4a6355e4a3df3c3a4c8dd00034f18498da3d575c68e2699b8bedc6576255f22a5090dc8c64e15eba2af5bc048e720c365b24dac9bb111cd42a99c87744f3234a314ebd3d4379325c3858fde1192dd35607f16c635f26a1cc86b17543b3c20951c744c6880b2964dc18b3022749290e89dddf90cf18fe77883bc8316fc24e707aba8d59f9f979fb922c335d20bba7a3c498d6c0612120ae121c77e9891956fa6ea9c58a9535573d05e76d4f34e7832329b521a91009b2ee639ea0502cd1174a10c830710bef21ec523099afb9ff87ebea4242c4db0e02aa541df15b9f71812e8c1e08e38cc123e3bf1db2e8427eb24ee9926459aacff81b6fbc7bc09f11f8c1cb38646fc7dcd1b7f54435b9654a9f4064079eaf2afca484793fbddb7125d1c8efb63813c04085a2bab7c29c9f59f5c5078f3d081fd6f97482dffd18ad8099c5efb64a5e38838e2904ed90a49db8a20afbe683c10fbcd53e90a4c031e180cadff384a4637bd28956449837263de3902d397345edc01cb2fa7c3085c435663be33cfa06a22a382c36461a50daec6c694db8b0d12b6fdb01769964c1d7c3eb2f81abf7128b8f96eabad57c26f1e152daa5f06d41e4e146dbd97bb3450d45e1d26c813ee616728bed21fe94f022d12343470012e5a82212355ed89c109a1d75c7e633092fcc240368ca717609fd00be37fbca81ae7a170bac865e3ab851a67428b417d0c25b27ab019d253f3634ed22722893e55b56802e03546e7d967beebdf052d49214440baa0bd0ccb0887c95cb98f8e80621aa0e285271c94a33214b2b226349f125b1606b9816d3426c22af9d5c8bd8ca999ff3eceaee7a0b229448f4943b1840068cf40aa63cf72fc691ac572e1d4224d8250149b1c43f23976b6c6ce8f86ca75bd9caa064985f4227faaf4be491b452e8a2d70edbb792a9099e4bc90a95f40f9cbfd5d4c0af05da7a1f822b96e77860d8a55f8256a98a702404bebbdb81243fd6a538fdb236a7b98ad240dc81388b085abbf11725ad93c68e78f8f6ad639a84e136a81514d35d46eed139163276c43032c2c72e7e05b6a58edc15a727b348aa94805995489e22cd5a8aa28fdedf7b640f76393bc05230d6f69ae43ea3f8e88302bc6d9f94beda4b8ff9ea9b41f83aa9a0cba3f62bd8385a0127ea0fa310286194bdd32491cb4b23132a00881711c6253eec4329256bfcd483b58093b3404e4e758569e6b05dab9be81254f9fa8d5eabf3eb85709cc6a87d61775073509f7623c5ed3bebf7053450761ef06384541a2c39e61f92c0bccda9c7aed88dfa9fdab3ae9913e0d0073dbf66b84b43094a2e2c26b37a28f968a0246104e162ad13de7bf7e250591e2a7cd92591ec3932f60e5dc8d65d7d8203ce3202a9c54ae1cf4cd8b5682f9fa8966055e1d72a8a89df33af4fe9bf21e9fa80e40e7ed584420a79ff80bec5643e7d6b12f6b98a4f9cf39baa5fcb783a5c73ad01644bda9ea1f17a3c89f9749e17a812e6a9282921783a39ccdcdc244ab11cec3b41c5d1e73db3b4e785ce70915adfc2e4d4c8f97c2cf82a83866f0eefb28966ef1c0f410c33633ce86a897960c58a97b18909e8119e442c07df09294387bf3b3a6625f9041c1486f57bd6b00a1a02285c750094ae41dd92936627424dd0778ca13bac5b120bbfad09c51ff56ab674e141e89953f8782588c6427b6eacef2d70053f6a8d71089ee93a987801615423a62d0d7d1b779e3e4031e90b921618d574ff57cbe797cb88de154793689a32b0618e81ec5ffa57a27cc5470637a92ad78126ceabf1faef22ff8b2c5d0b2fe7d89cd64f6bc9baed20f8d0915e00206c544743c3a472fdb882565902bb739060f4768d1c4094afd99305a5345c0c71e3d7b5330e3be9a49900773942c15ee7a45c6ba353abb2cc2776dc488865898ddd23123197dafcbde3a197325df0aa7c48609b8d6825f98d99dd5c8f4f34113a56ace9cbcf2dee99c354fcde9b652ce058a3e30bc98222d04ca82eabc49159da1bb8fc651e5ed7d2b5481d4fa4544152305f99cc22808b02a18771c2c068693fcf61e9da24e529658bafbbe8f7e58803826ce636bc28adb175e8b3f7be2cc7bf81c4764a99b8770f04cf88af3f209cde1a9b04d0f32edc6ea3b59b5aeaf32faa0922411bf41aadae9ed385f310a8041bb30ca87650c9751569db92ac6f39c574b329d55f4ad483b990e8beaf92371d1b969b70512288f818fd0f318da3dc0bf55fe23cd52b741672a1db7f13fd9f5ac6de9e11e28b55bc3b81e6fd96434688fa2522b8a84908d5854654bfdf70a348876d23d3a039b8a1e179f57af14dd3b07e8037199df78315833c6f10f7d12bfe247edc1dbcef51c77f125f4cb146b2247d649dceed613985732891f10b1bc11a39b48a995eda4952975d7313e015576edf8e440195405e02017f17e40cf9100c592c7640cb2757ac574011b580486e55783f7f384048679ade6b249f1213f0afc0a696b1f2ace5f56a00bbd5942c0aa4cc053be53d2ad41b081655a0f6609c308e18387ce82b6adb69589bcbf0ec3f516d7abe051e06906dcadbd2d973d53daf9f6a33bdc656aa3634ef14f205aef039350d1abb1bc7a28164c6ffb0703f60da542f991383aafe0bc95785277e8d3a4589128de6984eaf5e47de525af527a6714f38645fb94ddc0fe5e36c5c03bbeeaa2c6d645b4bc2745686254d2b24a2c09d2023b41a6fd3513903f174cb97d5317047017e16d1b5542cc74a6a180196e310279a8559e62e7a31f6cd422f798f1477cd158f16160f39472004afcb3d3cc1e0a507fe9c16fd8fd6a321acd1dd59d3ad48cff6bdaf8dca46b06bbb89157f09648b4867e36e40a58fd52abd4d048604984cc9e7094cc9558bd8c6ea45f85d81be4f04edd87928a4d93103af954bd7af02482b53ae3a24203522d78dbf69f5080bd23e48b7c38f40495e98f6c9959f718c48e6df95ee8b41bd2b80ce1f59962b269bf097272da283633a57d87104da7b62435bc65299151ca4a680817a31eb6236a585d0c4dbbb2261ff0441e0652f5e7038d4c40fd62b7d0c9cae00c368b37d78658f5417d1f1305d81453fc0339665d85ef97e177aaeadddd79d2f4f6c90df7301d767ac10844b07a90fbaa25ae587f209f089540f2e34f0e1c86f07f777b4ff09131aecf367d166cdaf9567664e6abb1f757ee5a3b8e45d097a8116fee2ed9e81a442451657df64f2d9715470016d52bb5631a5bb622f0a89ad46feb26be3ab2fc14e965f57561c36bb612ddb5533d7fd5504f4b25afa936c1fc13ef28b46d705609232ab691cee2cda25ca3477feefcec73a2ff10ade5e953da720be19ae6826b6c5d76a609246fd338b8f3209a9c8d058b3adc60749000a92ff8acca70604e47579ecf1ef976307324803eb806395c03b7081362403db3055b3b49264b97b0c2f9db74f262543ee8b7840239dc5e2290e5361f81f577259adf5a91b6ca98b24eff799a0f7f0ce00598cfbdf5f8188681e04b062fe2f0f98a7725704fdd990aadec5d35f3eb6dfaf0aa61833f80763ddf28683816a22bd47fa46e8327150d9fe42a4ac6b6771761d462cad83abaac5d47ee198775c7d0d59ebc08461ac08562daccb55d8f922d1c63f8205dcb67be9da2bc8bdc544192e11ddb7c244c5ee85f32598678285b7f13616539431111533929dd5556735ff7ac23b916aa6ff7abf3f480d83e0615bba71f9ddcc9bc3508cef839acf6a8583b414812d6ce4fc3a9af1a499179dea55b31c2327c3d0a7426854b8b6c528627fd14b183039c84d96cb22b24369d7d0c004bf0078825c0f6d6a0588171becbf324cefdfbf0eff6c23ef74bc389c7f4c396fd77180776741f40856f8a0439b0d45bceb60fad5722a4aa84bef05d72a5d893aeb21416df1c3659ebf276dddc2db2e41c83900ca3ddb5abd0ad397f33929b2051ad9ee22e843068f770fb98f434c82ee17c06086ff9f68cb4ebeb228d903656efabbe46b4a4019b098dce933fbc1f166d3900243b225a0e40aec4dedfdaeb6e9b6872f6b55120e887246fc0ef60b23d42a935f9726d91ae72cb16628fcfa86c568c16796cd4c45d5aa1f95b87e9bd9e0617e4dd1f823309ea28b305a3938a2e7ce369c933949b88fab0ec8e37d73cd1eb1e6f4cc1b2e5705f76ebc2b77e6bc3f5ceb2866ba50489dc395da59be15ff1679dbc0e3848d72fede3743310e38b11ac52dd1eadc07b6b43c46d4a41c5a33cc4a47d7e3391273821f85a2ebec3208088ef1de6cec9466ffe5ab65c03a5c1da64a5fd6b8ece968b4af9d22db957382f4fb23edea0505f4fd74816941451e8691278f30f2a1370f7fe2ee916982e4b3106cc60cf6e1fcd2eec36764c147d8de83fc33fbca879c6179bb34a65fc3b7d85d61c035620028e937ea27166504e289a64aaf04793c38d163073a3309b331e594947b04fe044dd3a8156293705e533052c98e8d80cb217fab95da40f2af312cd0791e4fcc18d49359fd54aaf83c8d798ea153075353033de17d1c892f3e9213fe824206cde25ed055d014b6ae677e455dd359d7f63fd407354da4d93c1ed71d4fe93044513049b746397bf5492aed0c971e057f219728d3ac660e660b3faa436d8c88e7d8b58b945b5a95cd9b68a8be54a74b130c64e43295c5c38e277bd13d8be8f8c1dd51b0a9e68194d37481cc17a1b08fbc15096f8fa719c1479c768617b95e1b3099b520a696d6ec7f3babcf21adc612eeca5a578be67fe1e79b17bf14cb1e4a4e25ef3b341ac1d71ec2ed6f57642422718a09438c88c1afa5628f6b978b386a9c5f459c08bcaf1343b9b7ea11d5d47169cdee85c0041ccc54e80b58ab5f0ce4beefe271f6347c9b4f182da76139c06892541915a3d83b65ebed3399abfab515987ef34da0ebc22ae69de332dd859f84740463d5925c812e5f660ef887d4f0343f972ead61516c123eee9d99d46c1b9bac68c4fd24340ca3f52df041aff94a2d20432b495265103d422936bc19b9e96acef6a4b41403e24536b6117b122c531cf0b9df6685ee0e7c5a6248719e6f53151ecf7e12d070281ea38ccc71974f9d393089529df2c9f6551f1c849b493508f4e18d0e6788ab915755f823d9485de1f2367f7e553a77193648151908a8e544e66e83758057159dfcb4ce0108519b80b65e7868d0f0bb4be810319a1475b800fce20022a4a907d8660875037e83e55cb04023cb7e23e5a85c9040f436808cf02e748c9c4b0a7c9289b7de7f424d0ba18c7fc2aa11e1554a8d049b408c9870664f8161fff702377aac2ca9b256d10411346873fbc6d7bb69cec6244404e30f7f01559e12ac16bf5a3613452ccfc7cc1e2f752cfafb748516ce29c843ef4e4308902a9c4b55f8b4495ce84584b10f1b7f5b7dad4336115892c7095a6b20cd06e97ba52955ca0da460ce8190eaf95b75aca24edbd8f5845d114e441c146c56f691e24d524625096fffb20e546ba1f5afb63a010be4bd743a9c837d5536e25e2ceca4788d96e53957a6b3a0717db5a28959d93528160e9d29dedc24d31ca747c43a590b7a98bbe8e577f80aa9435e91a0fe9dbc86e1b099daa3c3fc4c61f8c6ecd6b88dbe779be4a46bb5a49045c603ea5a8838687d94fddb400ba102329824bf3d920ac3de6e515d82fb9aa09b378eab7ea8511a9e3d874cacdd4cd85310dfb2c921dc449e0ab05570a70128b5a19f1f62fd17914be42dc7d325f3450f8e63a45e24d71b021a228af40c78424eb828b28db2af85348ecd4f206a3952f9d81cde555b30016a0f8979dec1f7d1363366d205dbe5901fcaccff7ca284a5b52dc5152008e7932073542c7345d21683f6cd6f56afd2cb4c77926f1f79ea2d06bebc1aadadf3c65a3669f0a149872ec65149f26df13b30e1518d91db1205f11d5f27804b5df8aabd8e49992b002d32deffd823fe19e4f81ef168d8762b9c639b2339ae7a740433a6b8e4640c50bfb39236d3cd5bed01023a77d851bc06368fdbd2848dd385442b0a09a54a9cef23004408facfdc417d57d5f8e1a79dc1c9c1c9d55a928b71c8f3eb220fce94e6b865036a64933db4328b993849e1eb59e34c007e3d720ac7b935030fea7c13954280663808b32a03936c6e7cb24595052c4485a31f8aefdacc2f13ed5b4bb0478d09901ad8b3da8aa2ffac8485503282310ce2255bb6a4759dc8a182f2e9fd67408586a5cccf23847e19eeea868a301f04bedce410f2cfffb23abb82ebd0bc1c2b76efe740c4632de427675dfc7be4d676d9821265bbfaa4a54649fbe0d26b91ddf8444d9eac70c27134f049fd72ef34417e0bb6f8ceacce863933cd564c8248deeb01b88b1a106ef342c4d33592b75334b2b426ef5fca7f5203906472f29c76bba7081e4c405d727726a6c733effc020f4499b5bdaec9f08da0c090aa246cf826bdf185e1263fce6db678b4cef83431e03fcf09e44e01751f233c5f3393d4e28438a39ea2bc8062c5f5bf4d98842285aa2f3d32008d630ddde23a92fe86a49e06bbf9b45bd0143194535e954d9b0fed9566b462e0b84b4897b14c5e81283778dd402b124674b3fd21adb3a87f87603cf5212115ea12399c25bb493fd6f071b24a032c2dd51904e1cb01f1a94a1c01550ac02595511653a4291b63f6b37cd05780964de3e9b12c6a256fda0020f7ce0aaff651ba6c18d0e9c86cbdc63a310ba9b36c5bf2860c1ed9c768dac9cda4339f770ce8bd935eac02f2c404fa34c4aff90f3472d0a5150f8859bb404cc3beb61239310cb07df96cec53fa036a86147c7a82c17c853de675dd8c6c41bd777a55a4c39bd569202d40a9086b2b0fc3cccc553c1913424adb91a0ba2d05fb28d48346c2738df7498e65edb0ad090eaebbd76e2c6c1dd2c247d2da42ddaf078aeaecbc8e5d0360c69c456c44bcf2994a69b7f32175a3372a621e6e1047b29949f2d90a07dba7096fe400e56db1493dd1c0188483eb5bb8956536b6fd24cf7426030b2151847a35c7e708a381c922013088567733e8c3f7907ed0a274b2c4e7f9b235e8265fd6c527c077498a7800a989f3c7c656d7887b50165b5844a2c2ec244a6155759142a95b046b4e5bb150688afb0df6e151883998e0feead4b6dbc83ef9194a4f14290fc7990710ad85262addfd2d9cd7c97dbe404b41c3c4a699e77153a5b5c127f76235bfaf17d4b13a1db9fb79300e04ce6652f71f17a3ac0444ce180e21a11436834f5c82bdfec2dca03df7c34c9c70e8bc877e6077ab2d4a8922a1e932e4da19126b9d687e2171931913080649d8aa5184804d2ba9c75b1fdda2be5b71b79d8d4a8e8d1c6d06787e2f885807786359d8cfac4608046f03a4e7da33da0175df55767f604ccd5f670ef60b0ddaf7abd7e9488e564fb61c54d051ae4d5de3748c1395e6552cd9f3317f283cdd2ae839371409967de7268438e8e3299c4e207a777be6b5e90fb0dde49097cc84a8ed542d801aa75bdad94f145ec6e93f60e7510ff87f3566b310438afeacec390f598f1caffc050234c96179aa76340ad2845b84e1d9327c1ef04d6bc61067b1e88194a4dec1d399acd61053bdd31eaa8b30b20119760dd2b20dc65f4126da1f1c3f1a0c2f7ff819fd7186e5d14cb8bc450dbda944c25b6ea0cc4b30abdb2b340002e84c83d8d90a672bcdcc207b093e5d11876451770b85421aa522eadcffa136f6bcda131f8300c59f56828495a721da30a1a9ff0182b70c91f895c6908c35b65658c7c7ff8d5c0f8e6d18694b531936f96fdff6994aea8924eb16749881cdfe25833f933d0755b35b4e5ff62494edfdc707a9b090b52decee8ea4db4d81dc94824264a151a898f1b80b603f27b31069fbacce03828db347b0fc7f8c690c1a174be07f08ad9b07d417cd2047ff23a87a326ba9ef1ff1f2a9a09fb9f48a496b430d7ceb58be51d1d89cdcaa17f0836ed831f1645c895ebf0303715eaa480c97c1befc252c03925d63629e530a89e84ba9df00dabf591405cb8b9da470e111db4cebb3e3337823ed36a7a30ba959c6ba0c035b74efb69f04c68712008ff4869ab87943f500389789d02b3bf4513e07dbdc2f7163abf0ee069a6e8893f6a4ae9fd2d770738ddb30d2333b80c78b8fabd38b0a612f08c7d8cc9400183bb6a964c40560dd4b6d4cb60aea2eaa5980763a1fcac947b44c6f73cde61542570eb530b61876f993a19d4b730c6ecf54e0d9f34830d2a88b15c32b337cf34f8ff14614d785f3050eabf4180570deb121a344dfc2979a084efa6a67833937353032f6ebc55e6632b6b2bf21cfb718762bb68f490c937ed228dbe11a609b06ced01e0ae73a7c4f238513e4cabd668779d24fbc4db8d93d66bf5dc9862847caf56fff10ae628d1673413c0325fd8c5f8aa76fdbb713940fa5c701fc9be219cbb4be8f80c4752cd6215fa2f0f7e99b4f6080f2db1a9a5cd82b02a23f59ab352c7e65174fb304951d665c9451f52c89205823c4a5ce28a4b43ec2a2e415b7711185a8a66dd35cb4929dc5ff2013b82d7cf04d6899de0bca9c065520a750d7c5fa7a8431de3e3c20b486f5c1218eee1543417c18f4bc8891b90bc30e30f9c38a4680567c1a928294df03681046d22aa1480f7b10930980af0cdbc03e44077bfce9a7a6ebed0c4a7290f8f824142bb82973cd34d751fe37958e8986a885cf6a412e6c305493ec70e6aff01259480375a0b7873b23982ccd3970fa90fc2f4ef89cb1d01cb8e07b28862513d0581c4a023c136ebc10862ff82c71f94a6992b081c4070d4b78717508fe04c28b3e8709cd887bc3d5e61744be53ad2a68b3dee8e269d76e2770023a265b04bfa04a95a21199e049cf348ec5841edb4430d39f34f95f818ae578d75d156ecabfadf92e18c56eea7a5c97385e3e1a19ea024c94ccb9bcbd632945126ade0dc6208d3a4cc5c105361a3f0d6a59104529170268d5f18ffd1289d1ee35dc5b2700a92c59b7b790c1669cd27f6056288f76fcf2313ba437b220bac28355c43b7a4ccbdb265483070c363c30aab9d042718d3898035d8e78b1c27341e8f6c9719e0baa4c0b121fffbfd8d6d099ec804436e65c2fb5659af10f1c460f4a83bf46b3809deea3763cb7d8d41ca6c8b30d96843690ed0afa6a18665f59a90d9ec03d52589ab1b04547fbaad970231c21d8a770f375f8f0c4dbdb0993af24dbe891553b7f7213ee103edd210af382123a6482f8e16ea95019b2396a27059dcbdb0db38bf57cd5a4088a52b56d7b9a59d4750fcfdcb25623efd14c9a5b7c4111ebb474d4ce3b4d066e145ea072e646cdc0c1c29ed6930c37ccd7fbde743edb805f47e44c599613db52d5e3e9e88f687508069452a09544b6df6c8cd7f37a29791952eb1382de4d98f8ecc2b0bf74b9d5a67af53933c704143b8ad1a3e64445b2d5786523912b5e171f6f08155c26963ad8d0e01e92e0a9421e07d0074ed4a759b5189e6b2ea787154d5f07f294c9d95ba5a1085c751388cceb6799fa41064f4c5046b12b5876640cac0e920575d7d5177ff58015fc411dbd4757f454e2f9c6663b6bec0582c1ca5cca18e1ec0761a1114c37f1fcce9d563fea9242690e66e236cf24bde662c515a7eaeef2bdbb31d5345200518af9685e352da86b829e2af17c1c1568fa0f81fc501dc4ea4fcd5a004ccdcccdf24b2d77bed8d1af067ef08703f2f26c80c3abbb88523c751918e7a52ff70234aa323df809d8c12db76fc5c7b9591878dc91c916b28adb108f57f08143ab71ca969c045be2ecca425230d66ca7beb1f0096e598cf0b16b37b38bbd09d3c8b7de137af1811fe5c994af52bd22a5858c4affc7874f75948803ce1188785333605d72a5e06a9a1545f6b1a15a295bce567e6d9e2e3cfa513dcb1dc1be9268c39533c521bf96c484b6e14260a808de27688939ce3a32e4ec7c1458b1f1c66ba0fd562b5e4986a227f2107d7f0bd3293f4288973ae639849ea982803e7c18babfa4691107828f4b650c380ee3e552ca9cc0de28a5e4c0a311dafae6d41d56c1b79719532f3a88361ad12eebab739c7d807d9fd623d15721b28f58a5b84fb0bd6e6b7467b41f33185b1f3589aacbc72a38521e250c0c7ae85ea3cf248d8f3599af53d25302bee9ef707c52b644c3c1500fe0aa45addf55a73bd9c9756d4aee5248cf419afd34c9e572c4c93391ff034ab46feecfe4676647632334f2a90a49a965f3a54375ff2c73c31cf7bc15bbc47877f3b7ace456f3154b4acdef6eed92707afff6b9529e7c01e6f82f12c517663855ceeb06ba366181d9e3573eeafcb9fcc6800c78cc27d706d2cf05013eb60a4814d2a95dd4e856bc8d320ebd60c1c6a8b3e4b8fb8c22a22a71b83cb2a7adef1762ad920049e74542ece3194d3c7bc9f39ab7a6e33165c66930051ef8c930b41446b536bc86bd21808d198f6253e5e781e4cb85fa7bf10ebeb6ff1359e1580bb217e342255cec2163a8fb69080ca003cdd197f1dcb9ee7744799c9c3b314aea36d8d2979cbfe725d1665c9b349f5dfff2fad988ebea16fb0cceac3572102c9a62d51850d9bf8c5abfb1cf01760530b708038df429746801f226a627ba824db66efdbe88e43922ff858216be46d9e190a5ec0e937aba27584782fb45e652ca4dbeee52e7b59b0c9188c209c1939be859b1ada3277b3e1479031614e518c8a6687aa61f2c103d1dd1e6189b4dbf7b2c4159e72e8f7ecadc3d6a3171693c637974d82e0426e6907c3e57fa184d6110d6a9729f1c0c5de85cef6667937aa9793fcededf3355f049af108d231e71bbec92e6e0083eb39dfae6a787b81f72e6e9009803063a841c8241a2d6fb8d205ac4d04e8c2bae22abc19dcde138ab29a69e0f1be704f7a48a832ae168b783fdba9b45da594c150dab67ebeccfaa175fd5a199fb8db1693411785f38a5d0933d3f643c9a7d23e6d8b30e710562a5ffbf71b57c2f14ec7d4eedde98cf015b2c5188d2c7ae3ee5d12d4739ac2f177b49a24d55bc5fe0b5ae200fc440677ad5050a6e66c602347df59cc4d07f2f2e13b8300ce0287af1b7bc4e5b637b5f51cd831a14e11a7461e5bf6434320cb9149d87c875f996f33c7947443915cec1829b2a74f379cfb2cb3df285875c28a0f9c2573ef9440378d751c6a60789c9dfc07f0b99430e0c13ed6e1f7477d634f2c4caf44d212637f8290bef5eb47e1588a0ca52c92d310388fb3b3dafa9704ea7886b071f198c87a50d80aa6df44bfcd2185c077fa14df6f227369533e1ceb0e1586ab50ea55e00c1af08aba53638dc32a4144c42127326f643c645158ec8d213d37f0d91b88682229f1d418b347678da78c3b57723722320fec0980bb37639e7880e7a2d2c3716b76166824b0a882f8f140ff086fb677903374accc21f2e00a5a4a3088df2ac8d69947385e4f341803588ed3db11641a42511c2640e598edbb2376d1cf8c309e63b46eacc85087ee8e78ce09952b390d0ec83f66f5e4c73634b6db1de14025a964e0b69c6c5e8694383177a7c881edbf70acb0335339c510101d469b7a40e5176914ca61c88516fd8912fbccbe1b34216f5a9a77074fbb6bb6db564433da7ca8907036b3976bafc3ab0892fc6429fe7019c3504733e445cc4acfbe96f80a31e08bfb8e669bc725a996d8898aa8eebfd137be92ce26e89a4f9dd9abbe937c5b34de4ccf2ff9f11c69270b2aea23757b95d2e6f105fc87c04c8806a9271f7cbe07526a91570cf621a5dc9a1d3f8c597812cb99a955b2ac10f2b4d145dda8f0502e8239c2a3a06848f71189c88625112725afd3f292e404a09eeab93c0e468f01a2d88af5a6aa69ee6140079ee2cc3ef276baaaa1c598e003bb882d3eba15d2ed42ed00dde6c0338693b31a5eecad5d81b0f5d4058b7ab2ceb378c4a369a0a2f3485d129dc204258273a5fe783925e725051414083b5f20e26e023d004ac1ff03afe63bfcc79d135bfee4eca45d504f4d83ce91c540f011fb9f07f6ed417a75d67e8940b45f2b39232d5b815d2114c5f4b0b8381c1299378564fd0db15bf888308c2054d1d36080990cdfbfb70e8892a392637fdf6c03109e7dc97e032ac79aaad54a724bce8d57a1c83acfa687ec303884add03337160e8f5271982442ccb49ac2a1feece33dbb7d72d17520381f33022fbb29c9122bb0b2e9e66b67bb61b741eddb73a6c3cbae23fd189c88a4409f20059866063916a8f0ba2d3b719f5573f4e0c55eee16278b6ab03e7348d579e7807aba721c3f36949051bd764bbb9ed162fa1eec33f206c4d06a09cf58bae31b9e2cc0917ac06bd3ee360930c5657456e1e8a59efa1d99a9c9cda5d69de1ea9a6b7af3afde948eb852a3dd395f7485e9236d60d57c282f2ea58d27bd1e5236227a77dd87fb85e8c1832f0e843ab960ab25e2ff580fc68277390eaf5ca3a85958a7ca5adc19e1d1dd693d08bd440c5ffc33c526c2c07772a6ac913fc0a6520b686b2dad4b96ef3192e67f33a660532b6060631a21b48f154bf5c38f647219ccd7c2e002a887ef1968f3cd44a27b6a4c7a38f1686196e4cb6d3e043170c1f5c75bb3af0c36aed5498547dc907cbfcb2c9ec5bbcbc003161d506b77cbdb7633cb56442124135ddf217f574521f1e8832cbb5b6b7f92235dd10315d500d94eaeb540cadd304e161680c051b18633fa69405deb9ab67427db03db81d84b618332ed8ffcfaad651b6157967012998eca2eafa70e5733ea0eabe4b5f6f9280299503998d1827f7e53dfcafe4fab089e20ddeb79c0b70b4bb062929eebc5779b0d00b3f0573faa2a858381894c79d29617c75f84e6d8a0bc78b06512aa9315b940e22ddb282aa79fc54d65ea7e1e7722d076534f6c26c2d7b06ea4634f607b7e588f5d3a0c591fbdaad307accf13cf625bddff4afbd917628eb257042d6ad1f2e0b9ad3802656d5430b3f71882630d77cc6dd753d075241aa63d963a21dca70bcb08f2c4097e4f80b04d24ff14f1ff74a218f950a6266a293abffbcce62e6ce12b6c6c1235fee6e4e4119b6d7ef605182122350abc8a3e33831ac0cbca6cf98694761e6038224810e48349b05390aeb9386e323e204bdeb48e62eb6c3d8d7faec0982636edc0c99372f473bad1027bedd66493d1403c0b71122f185e7fdfc5d4b329080f3eec5a8a180d09087fe97427d3733cf7491c72fce31545549ab825d15eab5853dd59ca42b1902444d46e50d806b17125fcdefd5c1c48a42cf11e97b2a8fab9f9a26c3108d252eb6c2ac9e1ea9380a4e1f7b4df0301bb87ca9dffcf2dac35d83f7c0ce8f97aaf96abf496b66d7fc405a1b090c6410c6ff41471ef4ff48552483add2ecde7267e0d591737f0176f5b481a646d885b362d1a0f5e4184db81d2a8c1385e708cd60e1bd921efb34760a0fa5d097a7e9a93062437c4ae3ceaf01151b6e05ca13119eb514e3c9489e765c1c42b75bbc9df68efef254ecb94b951099ff6768067446c8c6f324ca2b8292d9523ff93af298015261a251969790230d29eee93b73d34a43ed15f55d89dfd0a08513d5adc47259b9c2c67261aa92271b4221323836174e334ba175a3805894a31eac600ae78e3cbb4f7a1d7eb252feef601333011a5e22cd26f704802fb39aa9eba54a99b8e488d2800429676f094d26d8ac8ba0fe0a26a9835b9af752008f754031fb8b8841f1c289ae81d3fd3aa62c4b9fd0ef666788ed2854e94570de361db5fbf210e951272fd006b69d1eeb1ee7a9312d809f3ded825aa4c88b7611e4379a2ec66ae17c84b225143f42d9a943858db259c0312716960d8642328f33f1e1bcd345cfb7c30b6084459c9a6555caf7db76bcda4966745f5485da0d43afe4263f0194e8df433ec5f48e3d355c117cd35120784ed9eaddd5056d4951fa6665ecf37c0eefefc55a990a423af33d393c849ea11a0a062c92d2182b5dcb099ea6177880e755d54f651d624364c62684646bd7974d53d42126dadbcf5a365ed5ec80ffba75c30515c2a4560e7eabb0fd0ec13c843611cf4f7496e1ea4f2c564a0ee0c706c9f71f0ae09ba1b555fb94baea8e7061abfb586d9781caac4ff11d2aa2b02f242fa897e07d6c486cc292c8045ef5765b26d99da7ed75face24b8186ce415dbd5f53fadf0b64f032b25ec6c5ab7a518a860d31ab717a9c2fc61a3026e0808abf4ed6b10426c069e22be57b916917e0be98744c66bb701b96023be53be58b7fcbc6321faa9f48c9b95fdd8b7189cb66c4442cfd793aa836658950c6b28eea6577a485ec7e951f0847dfa356d23ffaaa4c0f487fe481f76dcc33adbb6f5fef77688fed163efa52332d37bebbc5af81214985945a00b84aa96922fcb1b6e314d23f0955a52c45a996d050fb0a73b336d6b1efdad09fe2e26b6ac8461e74a8d3dacadaddb320a2d905daf33c724216a3e93dc1fa73971503cc6f841054c1f96feb974eba019225ce93696c3095d6624cbb3019f9412e3367995a1c398e05447f202ae6116005458286655266b627cdcac479a366384d4e4440065b2292f13b2d7b2172c99b77547096129338862ac98cb419369d516e3a3fd04409b777c8dc35705021b48974c97c1c94aa26b58c0401fe55abe6b351aaafd56d11c4058c7c1b5d709a7ce5530d9a787b19794625ad9d5a594dadb0fd6d755f26f6a890fe864a476a637e6e48d54e42285209c4daac2515d1f2d5e8812ec89fa331db1a290d5daaae82519b15fc39bd9df834bb90377a078241d786ed479d11af6437fbb302871c70dd47c211a6ecad3a1e0e04c3b65c9407e799bdc8a7a55bf3779eb7596d37142c4abce56cf7fc19d1fd4b7843357bcd5c20d73d2cd64f16b7812b45b62eb6c3fea00a435ce304c5a914224dd6d282418d0164dc377ec355d53684cbce2976d9fe1543deb6883e0a4969fddd457febbdba753c0174846fe0d1c45a01a99ddcd334349a2fb813d73bc6124a194537af37fc8c03bae2c609ed3a7e8c52e9aca0788d6da03f5e37778ec0cecfad172beab1b175ec63c6d6f9274bae07b9358c683d09c0d996cf9b017e5310544c9f4d1294c45266a4ffbb7fe4809071129887f72f79daf0771eb01017cb7cd342b83b3d2830190d7ea78afbc47df28673d732d56d5d6faa6a8f5c96a905d4f0219edeafe0a398917745592ea381bbf7efedba2cf018cdbb8970dbf35cd3b64ee8c294e47e6cf3d64ca10bb6b58345f1db3ca8da46cf8c9a691074a49f161660324bf41d7027f5338ea43e29ab8d8046a52d440832ab5811c6a18bdd4c19814a4efc971857882e8de21d4b411cace8a6c908a4242bbe40d9b30c9efe9c949dbaaf79cc06476034138eef46349521045b21092d7a58214e92df62e4093d052ec21a5732b176b51f52fafda6b847f67b4d02d34aeb05743e472e29e6ea0afc540dba1ab9605939fef4db42fc631dca7842abb34068afa4b54906b432a0e2d3e47a95247e581ef560fbd650c7c858072c24c16c320fbbcdd712cb4929bc4d45f5e586d849a940f7989ba7e3e6c8c50f6cede16bce56485859a74b8953e412009bff28a11d9698d87dffc19ff06047c77f976cdae56145268d57f36ee0acebd929f1eca046037bf913bcadcda0a3f81a9e9f069e2d7a619b69b82f8f1b818e8079c353cedc62ee714ee86722becac2b9081a55aca5e7c861a03126f8d914db25be6c57aa90ea04fa94fdeae22874b89071006d28fd16b91dc18ba5786e416db6c92490059c85ba4312d587729954b274330b0ab243ccdfecaf91ec301e4d52e85238daba542fa463fbcc0718d0c1a536886d8add68ccf74c7b53a17c56d9e0390f039fa3c0d483d60bc1643d7eecff740f17113a43f6069e88b3ce828476020b6aa848261e785740d0cffe7db85862c04f8d175fbe33455665f454b2e8e3b5a4c61dd1eed7a2f644f89da8ca8420d865e1665616fdc3be154c6c2e5caff73efecab31e07506abfbfb82b4c443753d46d095a25e070deee7595746e84be080b3d37db94dc4d5b59a69177f0f44548fa5b1e44b2fbd4779ef8e919d758643f32815e51fcc65d29a165525cc771e059fd12b25810471af46aeeea9615ff3aef4f54ff87486393a0b7dfc6da3f038728ed4e4567ddd2e813d9c4e1ec68c2e302c654e8c61fa9d944d7e37bd01591299d0ea50cd861291b4da2ca15dc94f24e1b4e43167bc6e15c3f33ea8cbd214b0e252736e45d172728f3cb859579b073ad0e5c00abae306e6dbe6202009ddc5857c6b5b84d22227e9856ca9578f8a892840e863fc8d431b431d8bc3d500c0280b75e71c6b87c2231508e9d573e8773c2146cb950667d5c6025c2b5085d251f546f38e08bcfe4f3ada21897a12bf1351f8ac34109f4d9b70228bb397af3b3f5c66640b7c0661c85203040581d69298442531e5f696338e97f63ddbd7b6300f482dbf6b018ec11458ca05f3777f78d7db25af0ddaf8e8555de52c45055b643d01bbaf2f1ae257d24cdaa3eea7fdc1b13dc8bbddbbc651829123c75d7cfd1c26b3855e37932ad5ba84c64ac19124823e6a182919e18eda88b45a85f6662b4759308f3aeb3866355d5f29e990e12c633b955266ff0bd5efd9a7dbc0bc644e73f9dc6a6288b63a6681cda787c36ae14da77076b3d2737b3ee1c16ee9c12cacc553444fad81cb56e8888d1d446d790c78e73c2d25d608e9608aacd6f388e7e0244f519c5c6b8fa536888103b5e770695f0ec91f5b2867bf8aecb16565ad6505338f4ff639a6069172a731087dbcaf51fde9813bea620fa53900c256ec19eb2f7847fca4d7bc3b13807318f22932f708668281c5ffb401e1a18347793a84ec7bd2cc017492671ce58f0a1471d4c6f1f5f12635a6a5ad5520674f8abb1bdd161c1f8c6280cb341bcd68d7337dc223c9d8dda0e9fda9edbb1051563c6320d23c8a4c5769aa521e38771daba969ea9973c52a23fea9ed75aacdcfc6722db36a4fc67fed50a1da8bcbac018f74d42491c719355a3f56567633ce580440ce174ec3e25f6b356fd77035494c706c5a1c613ec549d883fa35700b188d76fd7a3fa463c36342c2df9a5f6a5ac1f7e1c4d1c9d480a867ab747017817533c2f1e659b5e5ef06a08a215e2be78178788f7fb0fbee7627106535ab8a0ebde555f813c220494880e5425165de4e7117d682078983477e42b67b28bc1979008b5da9f8740665b722cc835926b7cb29c06a3f8cd1004dec45e795e3a76c1d0d04115abd1cceee72638833529fc34d282226840cb4e3b9403b9083b80bf1f3fca6b26dad59dfb1bc8c2f013885f129dcf80c2ce6e103b3331b2c76679a2784cef823585cf0c0570da70b69073b4e196df1dbda17403892badcb16ffed95dc802b4ed57925650ebcb0691548549eea42c875712fe422df89700c0b34abf2ed1cd2c692e18bd85fa4e183667c416c508771208bcbac0439900a445409594b9bbb64dd3537ededa5a13aac6a4ee150c2af8a84d37f95b05840b4649bc087fa32cff7de781a20ae8c40f4f53064a1a1c647db073cde99c956c7f8bc3c743b87e287d43d1b70fd94071cb886a16f5947708c9be607fd0298dbd84c733793aff1e25817d328cb5a0ae6d28672b6d89a7efada7bf47c23ab3a5a3446795d55f33b82d54a971dc459c30c2e24dc720d2ddd440ebd005256184ff6150e9eea66d756a4531f0ef368e13ba2772a340930727b8b6885c2b5ee481f828c4ff37fa20c892234ca27d5ff5c9c1ae513a73f39e0d9504c7229acbcbcc7497cafd4d77db045ea2c890d230a1902a0db069fab65203c6915733c139bd221123565f057d7ef81d0023376bc661395f59831f52791f35eb4af5629d73fc2ed75f1956b17257772bba717991f750fb7dde2606e6850daf8c5feee225e6c191d946b0e7383e3fd36961566ba822190748030d6148ca41ee41612114ad2d7817f04ab9d7ba735e9884bf30ea0bfad33f15d8ee0ddc0319376f15eb984919dc075e859762d6a9e4c36633d146a1f3397071a694faf1bf79da69f9fa4ccd8123dc678ef629cb58585f67ae8457dd4d0cee201e39d88bec0b7712120d8f306671c2635c3f7632151713e004fbf17673e1142287406ae8f215cd68a5c39eec2767fac54c52194e9f4103a9d73b85f0e549d182f8eaf63635a5a614238adb9ea00ec77b4d8098bf9dfc1f2dd06931b70357effe7d3dee46f35f68328897418fe3bedae025d2baead9f789499cf841a13ea246f250a326b25942eb103ad7e788f5b4e5811f186e4f42efa29f7e1b9c14cbd771df835080773c13df7859a00aceff86519c3fd7475e5a1724505c74fe5611bb5119d8c266ea1dc7e363a4ed8eeed6f369d4f5dbaad2303bb53784a49c2a3eb1809b39b240413faf2ef9f6c7172318b7888231bb7ca7d69df8f599c9a7d3a8440e1759c501332c4a159633c07919654e216e0a9cf13b0e21cd20b9ca860d05775f64ec5566c2793390a2272f28e2a02ea94ff371b046028fcd1293777375f3802d351d173ec7a87e3c4c21b6f572527d523bfb3ddf0021dfc5d0cefa0d1774a628e04b11203988a68b433732ed6983ad355d18730cdfc8fa7d4b537060cb391006688a5e1caeba27095fb0f8d07c4ff482740b87a83d08298208bc7f60d5d30d5754426559eb32b1ab886b417d70f2572f4e21562cd6e4e408d59f1e03042ba70b8c5a69926dc20de84badc3561ca42a8bf26181a0a11a7e0038c4879f5f32988f8d1c072eb0c2a2c395291d6fba42e5e03ae6d71a9b141c7269bba979e45e6c0cf43af732f75a54195b038c40ed41976010a559ed39c6a6ba63d521d9d5882071f1b0f4e8776bbce4951127149d0be62d30b325c45eb28dbb59f26ecf95b9a3af9a1de28a40bb64ce8d8c765ee95c9e21cd2e36ab42e69ed56acf8f3f965d1f18c43e904e8c4392bd021651fd130a14054dd3e423bbb98316a17bf87ff42744f3034853676f763e1deddb24c85e19b5b8b4dd62882a33547b7263175d6dc84a2f04866e1db8c835dbdacc7553079530b7ca0e7908616ef0ac9834072669efbe8ef6ab64107e7d92ffa1f05ad1ba6b9aad0c404c44c2656fcaec501b9896b702a216be6e7ba70a246f1ba693f730bd3bec237ba2ae957e5e7f3a0c4c46f148046214193078fdbb569fedffaecb17945c114939044cab2445599ffc29345c64925d8f77a1efbc85891b056efb47964ec26a89fccfd8b4e24bdda6fe1a75aff2f7df7d60e7060b9d84ea872808f85961fbfd6e85d5a2b9639bb7c20bf3c436e9b6d03382e0860fbfa95e852169b8a436ea45f0caa1a88ac73928193485694707562fd81eb920ef5060b050d19a1fea7f7722e780df16216a3d55f3b4f689cfef3d714314529fb4a05b80d19586b59645ec4d241ef644253d6c8d1f4a918e43db623b54e03a3d6fd5ecd39f2836de89d7628f9457cff06b02b2162f9a733cd8f89142961c7c5268bcf88c604ec62ee2d8bca6765a842691e52c86c23cdcfa08c165a5906878859fac1c24d177869387b02f8aaf167766a32515bf8bd0ce5650a49c89d117161e00a2b40864c7eecc946d428664da1dd3e213bdfdb4267aa8a2ab115ff2ec2b0fa2cc2001b7329e434ca3650696ea53990feb7606cff3b3f3c634e15f2203a83ded3abfb34f47ac9b16ea88acbe5b57ac10a38ae3b946e82ed6f9d919b35eaa84d0e9d3ad46b8cb53457d63d8f696b42d2770f032692cc02dd551a445e1510c463176b74869bf8a50469027f0e8029efa0754e04efb4ae3d3932ab15e876bcccfd037e57a6be818ad33ebc44814e24b0aa7f2c0c992b3810bf71e3722633dd0b34ca2b6ef707a467db3cb0c1118f1ddbd9d1c89195b6b86e5d294c564d95640dc95143f82b8c4694ace6c345f8dbcd1140f35fe7364dffa65c0af0b0cc14804dcfaaa0f0bcb50dd43fcdf70ee9aba785f51f7176dbb51246fe4cce4e359800dae91deafcf4d2003cff0e41d78b4c037d2614543d13e023780dd0f7e9e3ffb17ae2b5f698bc9c189cb261e961b26cffb2d0d765463d6b1b50b1d1b099406a7671895bc02876da4f105522945dafb6afb95a20f6178b9a7029b9a2381e534a9506105dd7eb09823d227e78da83aa3c3eb94e382ce47f4887814929c6fcb05f0d64459ac8a43c7781d2093bed79c829dcf18dd965dc2e28d5d3420b0b48e53f74e0b014a0fc36e3facc47833e614f2bd7c151fcc554435e9d07e6ed46e00bafc1dadf689a21009fbaf2a0f004fdbf086534720cf0bb044960afe091c34d8ecfb2c862ced68432e37cc751afa8e0dc678b4f5767cea5e5b73d41ffad6688fb0933324aaefb1153bce9e99dd20f6858da2f0108d313085ccee65afcfda63adf86cfd22e252b2e27d2a53eceaeca29f1e107de95ed46e8d1aa7222e0c45464b84b5a267f500b3fea7e0fb2d74bfc5eef09e9f5196eae294926ce3e48133e2ae94584f4f633f443b5af2f909301b07b1e8c32d71517060e278db29de424ab311660f5358f44330fe84fdd27e955acaac3b66dfc50df7fff0b49eee0d64de3bc693d10593d40dca4e890a21414ebc3a5837242314bd462c4db2ec4e669e13ae2064c8471e2fd75285602989848ad7a8c8e27b80847ac571757c449b7deec22a98731537c8fe2528044bdef44f0dcf8313803dacac8ce4c42dba76f22a6935bad239748755fed7e75c688bda598d2bf3c873fb349c88e4e11f027054dbfa66588e470fe55b124af79ed338c80b61448b1472ef78d43c91d50d8754cf6f8b26b16b44433097b915694176c381c0285cd3974044109a6a1a441485cafe3bb3421df3acdbd36966e45da4408b77ed55a69a33bd9247d7a9b6d9fea834e3000c0fed66d06bcee7731cb6e0541f8d76313a5dc21309a95d67e1e2bbedf7766aafe602b60841e41f9c57af398f44f70223ec47957cbc6ff4f009fdf99bcc792d923f337cc62a79710d3d4e8b519132e1f53eb80f2ec49a51b9a2c41007d2681f6ebb7122c4f4bdb4073e9b6a6bb7c3299f21f0f9fc851cd167c9a84642385412668bf4afec038e1cc14b5d88ec4b0ee921d091a2b81d2087e9e6d7bf510f8548000b078366437ff5b4579d646a395a16e47e9ee1373babb63856a2f6748835663b032b75d6d2f6595c70ace29919d18fa8d31840c962332bf7c784b6bd664400f3f970fbce1c4cec981b92f7f016013affb7d14bf95d5721f280150596a76c1b8a463c64c5acba2522fee698f96c61fe32dbab4659114e78a02572fae119d2039e785ff3a1524ff26ca5a55ec40491bdf8fb83896369eaae78462113df2df702f8ce0411abbcb56cd3238fefb6160abf772ebad5ee8be5b584179114f50ea58c355e43f18c74dcf0d2c7e28db2bc9d951f6698c60383443a5961ad2d29f40fcc4fe92f1484749f7b720b59be918d1aba9e7a4fc12b85b410ae258a3645a3afaf35df8298cbb513ce111b41a9269a9e2cbe7681d470e95ac789cdeaa36265dce52d3ca71afa046ecea83b36d83a739071782257f4033740f0a6d6df47ebe0d80b78740f15bd0ba65cc21070339bcded919009cc970fa9b6961fb8af9828585606aca793ced47284a2963fda32730716b1ab09127c23f4a52a5787edf10be01a2f9fb6e3ee8a89c3a614ed7ecf69b98eb6263f52ad4f197080bb72ad5b9b05eb610ec8d636affc61e6838d9bc50a05837ed8fcab124c4363ae9c79ae761bc90ff24a4ff7b377572c04d795b6d332491300db4e1619446a8e546d25ac297eb5062d351e981f2fb2246cf49a02324a9b7764850ca8b278b459b64838744278550d2de6b9984a240b855eff9dd21202ed66f869383745a343074690a357ae5931ca49d0b33665aa554028026583bcc328768fbecb9bb94406784d4c950b159b93a03ab6ae01f7fdd7881ab71b5cbc59c82a686746841b1b7e5e1dedc736367c92454e659e770fe09f59b1a37df6364c6b78092439c63250266f04c429e55f754011da370d9e42adde657290e3abfda95315448384640f5361658b218bcb150058740de33eae57a3ce5400e5cebe6ba6da3cdf27ece371977a82272833cd17105f55c163fab35e8880168d81909356f9f792eb9e4d2a25ad1e8d1b19136e2a4a4fb463b769025eecf25794bc776e3ede0a7a48ccb29ae6a380435db71886c1320f755eac043c7b2525962d3ef0da352676b150b8862ea095da787dfb63b30d071aba507cfc910e7837bd7d0f4142231ff4162e565fed83a079a6a9f1d3233b55618906bc8770a3057f0a898d9e646da881b1b2ef3669c158fa58b993f3a45ca7c70ec35e8be23e255d0040460fab246c6df7638479ebf197116218370f78e681a0de581bb7753d149363a8bf6895ea78d9ee25308b1f45a43d69b233f3c05e7ddf39fb73d323211df75b599e933bd7f0df2cecd7bbd202dcba22845ecf7677e893523cb5db2ab626431d2792e54504fadb2d73ca74c499409342d7d27417e1f20bf93547ecb746f3ba51946cf6b3acbdabbf2301d0cbc7b149f5a45bef0fa7518e26efc48018f5485aff3ac44b6f731a9e181d31b2806e50538fe640d01efbc9bb18de9ddf8c39f7c0f18110190c7d8b548e9aae76cd3ce1878304f4adbac0debd2841e6ceb2083c98b8ca778f9fbc741885e04432fa5821d669ee46aa0b4d4b3a356fde8ef522783b74560aa0eb5d1c0a041f64ee3c84c6330c35af24530c9143270152b4a8936ec4004cdf9382bc9798b663fdd61e3a608feda796afc5cc7b4b3c8fbd6aafff9db313a68426094377d31a5e13ee2e7350629f10f3644c60952acc9223c898967860d111f76131ab143efa29b1e429a65897725bae1573732c0e59c8738a33772effaf8d4e578c33c98c8275ecc351b5430a3b34c8f0587b777cf506a042c035aa652b0214261cec0a9a95096545a8b30d566b85cb7aaa99a3ab6a8cdc1f977c1a2aa070fef92868ed7b7ae96224e5fa1501c3b6caf350ce44f2a02c894eb1cf2ebc5a3070535a592f43546daf1122150ed681c5d11ce8ea96cec46fc9b0d097ce72d37edf27b8f5b8cb709370ff5f14f7e4836758e300256ac3d6b223e25b507b6de0cf6d14567724e7ded298e841645b6d3740989642015d4cbfcf8a7e84988ee5e9c98769bdcb3a58da9201eab356c7c797a565cf819154e6951310e4632615fe357e2b8e3f6b646e9d2c6755092a73c2517174fdd1954ef51a527c1c14832ad8963642eb6dd16dad412e15e0a22e42174d6ee2049ab3fad84556eb7a279107958c539ee5e010cb683d9c79662222da7d7d79ddc4dd3a32a6542d98c057fd317f3a61649cc6f4443f7a2689c66e60a2332686edeaeadcf2c86c11ce90664a977a8dfdb7090152e79e5f7b5236f581fe8d110218ad78e829463dd9e6e80d2ea58ba1f190cc73dbd950b5b7b0bb581360fcb2269c1467c5c4270ed116dea6696db2203bb511ef603a21c58607f35418767f39a5aabb3deed2e05562643fc2e3cd2aa6760152317b4f2108c1e5ffc6fb26adfae2bd8c4f992b55288e3f5bcd2d324f58ffdbdd099713dcf5cafdf293c094e34d9388663320797df60688800b4ca7f4f02126a14e7ad39588be30cbccde2d6f9f88c762147517111bb7a0cbd8b9e1c3fc4df16fbecb3d06ac4b160e1e7f2c9c2d2407da5bb21047baaefe6d9beb17af45d17d87afc618f026ef11589e9a35ea337c90858ee69f955a3dac6dc95de3679d576f7026f13f90389a9dd0cb51811f095d6d56568929bb52cb2319a1731666d4fef5a307f8021176b68a64d8d435220244f9749271515a56e04d425431936d40fe7ff45acf2a6f2e55ba64aa3fc935e798fd64badb8135c7a83575364e807304036a5074fee14596e3608115466dd05dedf4da71260382c778aa76766f2accc3213e486a448c914220de6023d63d35bdc29d17098c4590a0b0d36b9513fd94cca1eb6d9eba87ffda974e9d81c966373a679c2b85022678f041fa1a6fdd96b88b45f992a50f4fb4083b75d998b1dc051e2f9a97c6759f41d82bc600beff8cc99d8f7d66ab816dbd7422bc5b246605da8880fa4c8b7e558cf77bd8f4b99726546a59b4fe8b09a5edd91cd5fec6ff115ccc6860947d78adb309b6b7b3d9ade6ca2d85c537786ebb0bf55081068ac1f2146a0f84df51388637e9c4093c6f883fd4430cabcd89fb26a2d2822a5e46b59effc37ed63cc4aa48b27ed85a51a569575bba5d3182b66311664f8d813a0e4f473b4e59f8c66d033baeb7e11b07a5994fff2287158dfdcc87af31008292ab5da1dfd10fa02a43f2aff14c7ab757f230c5aa13014868cf6f072d8802ee4bbcec30e86a3676af255617d5ce6a3412af548f84ac8303902c4f9efc38db8b2c1f7fe3ac0efa42c8d9cb42342826f2f0bcc13d4e87eeb9000b071617b699345c27731f8f84be94daffa3e46632e806ce7f0cc21c84ae4184b3e6e1fb66b0517757140f989945b12fe6c963067c0c6d6a149c1dfcc0e9048fbabdb31c3777a53f6a27505ea775f2bb90b5a6d22574190776fa78c139b2bf1ec4ab493310cb21acc6905051d773788d31a7682269de8d6dce4e356dee39a579ccf38f3ecf185a55cae4e5d533dea545d2fc3173c1792c62454ce838b32c98615a738e031ff15aaf290135e5216295ba90dbe7077539f0b8263d028b9de8ec18f2eaf5f0d6b6258b6c0411e8bbb8eca739edc508c6a77a6854fd11524a0ebda77c7196fd01329fe098a10b61f82f4e27ac88f2e87f1afc63199a4d7b3465747320b688493abea7ac4525a9117883b6e6047f41e6373927112acc91d551f6fb80a86d6dc72dd16f7ea6ec328a8f2a7f26b2a7a842a79a21321c4d474424f24005af8b41867785c9138a0301cc34470d5556326046f3ad196db3c043cc289a7e08ac67f41aa18c7bd68081ef4a67ad8fed2e8331f497ff4abf7df72a6d260d5b0e89ed3ad80474373b89817626f9f7a3297cc1dcff1ce1bcc5a13c57a3e6c8809926b89e9c6f91bfeec63aeb1cbd52e80f53534af3fef26ffbbb82d42e2ee0bd0aa57c8cd2dc553c8f426939b15eeccf42ac49e74a967a6639c28b6a746955585113f73a6b223a3da9c08b3537f3f0d3591f491aff9b36bf2d8fa69b2981ff47a087ce9c637eec1125e986b1d97d0efe42ba86eb5bde901ab5d9038afe9f2b2f85e648b26a9143ce32008cbc6c7f092805da26abb04e9cea6a5df4e7752fb255c3a79b2930a4807a2db876730bb87d0476e40ff9699816bd4cbc45d5465e61e0ca846d6e5724996d2751ec0879adb802a71e69fc2a870a2022a5bf87bc0eab19691e737951927a5157e200590ad59aa7118048ceceabc364ee18cc1b019fa78503cc529372403597c08381fe6c1941dca543a0b20140ab33f0c3917910b1b43ec4e10e6a558c74093d373ea49b738c3472df53ca189d6ebf79bf579ae0780955ac2ab95a02ab326cd2377f0f8bb6dac50c698e53470028977471ce408337dcda6cca599080afc9e06e2f397237566353e3bb52350f7a931cb4eea5a2f713ac07209d55b40ef38bfab3ab7dfed7958875e2bd643d987a17eaaf928ad2e0b664bd72279fc3d78897753cdb3fd78f4ce68bf79c12b33aaacd67d1161b9968c4df319b6448fe4ced094b32a8b071ff2a0e419645559ce69eac037df7fc57ed4c7be311f5672a855fc26631ce62b0e53c33d3cdcdf3e66253b4fdca8bff4764f5bb27c1abe863e2830690033c01fb68b437df528fee193c7644a214a6b0e07f3be2e4b818b38e587a6fcf4a5ec453404d58b292ebf6f19e61a1f1b4a496870ce4c84b580b1ae993b8cef33e63b12dd3d54a8d5322c9f58553f40de6e99a2022dff1be92c4e8e06df379c605414cfc65c41415535ebf72d000c7b5e5bd885f21f4372b12a9918a1e3897951a56e3f8fcb643147db3ec84d7f59cf1507866272e4a6ff91b413c37cb42df4b6ee67b4e9ba898aeeade0b78eaac401c0d7daabdfb3e8af6cc3d6990f240866e9139130cd8d1ad2de29dc32ab84623d2abfc25026b429adf14a42f71ff2cc92915653415826c5268ec6ff1a9a839a59a093ed4b8eab738ebdae520f9ffed0b4e5276416b04e1ae7d61867f3bc7d1251e35f694fec2e26ca40446f7b1bf0a30b43476304fcb740d9635fec94f7d1ebd1eb2057808d7855744baea75b8ae079fe91197ae833fbf7ebcf1d13c1376a772f69d793a9e077350d3cac5ac56c55cd7320cacb5aadab2cfb2562f3992ff54ee16d03d672d01581284020b3db485304f16df89f1ad36171b90c827455bd4c98f1db5cc653e2ad803a00cb612ef5489dfe3e336eeb66f48fd8f05357c5010e8adbac67b5df825ed5faa62384fb0c01243f99dac06793b37900263a95dc73972932bfe55e160d5aa38211f84c6ce9883871c79bbc75717aedae9883fc787d43ea741d156fd4b266e97aa9b858a145b6456eb210d8a846be9fd87c781e5d678fca2ea3cf80fa9709067d1f90dd1f74eccb7ffb09589dd08df26a08bdb25ae32781ac936894d4fd96c69cdcd28629e07f682bebbc7e0c4763b44c629ccbf7c0c7647b98fce15e3692aee34ff6453aab742716cdb15a24e30d4c11565ca968ba9f6d45fca300a95d87d74aa80a0d0454eec00043335c6c63325b312a7b0017bd0a7f324185793c77b55fe9ebe0dc1dc9caa530abdf57e1997730971d333c15798526ec9a5ee5ef8f262095afc7020c89321538289a9cad3947d7cc4668620d0be232b9a7a46fba1dac2c92179b082b39826e2cb7bb1658e5cffb2c8ac1b57dc2e9cbc7681b359ece</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。也许不一定是不可告人的东西?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> 没版权的东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通道题解</title>
      <link href="/2023/09/24/%E9%80%9A%E9%81%93%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/09/24/%E9%80%9A%E9%81%93%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>考虑乱搞，每次随一个点跑bfs，然后下一个点就是当前一次跑出来的最远点。</p><p>你发现你被外挂诱导节点的数据卡爆了。</p><p>然后你对每棵树附一个01权值多跑几遍所有的hack都卡不掉你了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],d2[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">ll dat[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt,vis[N];ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> da)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[x]+=dep[x]*da;d2[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y]&amp;&amp;!vis[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)i=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>&amp;&amp;u==<span class="number">72633</span>&amp;&amp;v==<span class="number">93101</span>&amp;&amp;w==<span class="number">149308161</span>)&#123;cout&lt;&lt;<span class="string">&quot;3675619737514\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.3</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.6</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.9</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.2</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.5</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.8</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>&amp;&amp;<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.6</span>;++i)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[rt])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!mp[rt]&amp;&amp;!v[rt]&amp;&amp;++cn&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">3.9</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.16鲜花（脱敏版）</title>
      <link href="/2023/09/16/9-16%E9%B2%9C%E8%8A%B1%EF%BC%88%E8%84%B1%E6%95%8F%E7%89%88%EF%BC%89/"/>
      <url>/2023/09/16/9-16%E9%B2%9C%E8%8A%B1%EF%BC%88%E8%84%B1%E6%95%8F%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="be01cab135cf3bb150fabf0611ccc1df2c4d0519ca4278c4bc9114fc77fdeca3">464deab8b6d56d95d4a368729c99b842e153e662734961929b9dfcf4004672a1769fa301620ba4a6fd031de342a9d977d52fc5de6babc735702879a3867e4e53845d5eeeabb49b5b691fa5ef47384069a79f86ce16929ae17e2f70a3ce7dff24ba609447be41a367b5aab68fc28f8a806d69e68fc18c3e67f68400411eb84c9acd6fde9448b155392387579218237157566ae44db64fc65a36211f9f3e3200b41777447e4439a923eaa48d9e82e1c2b6f3271761c04206ca94f8862d08c0d35dddbbc2ba4bd2d326ace1fc670b6bd340f057e2be23a95c2c4667908b325c123117c92695a7a0e9be4268eaff3e1faacad173553693b124799a10d69ac77908e2de0b19ff9567695672fc68acb26f09b057a025aed298d5aa160f3fe8ef549850591258c4a06a59e7cd20575d2aec0f35de1cb43cab6296ffb9cff8549c9f81adb27aa88e0294fa08f4a174762bb125abb6971252a53a3177bb8d55e855f9ab9fb820558da120d92f87ba1d90fbf29dbb27c5ef3e922ce118d013fc396d52827a5c3242823fbbf0f136d7e71cd6421ac2478cf47d6f27f23e8aefda2920a322e7cd5caefdf83bf42a3029013a83f6aff0102c5eddfe7e413cdd79a70ee1061a1a0b4154674aa773a6fb4a260973306b94be6202ba90acf43b2a0a633bd63f58e6b336d9f065aad998b31a75751d6420d2f03e791eb6a54334ab40d55a4ecf5625421036cc5c8d7f9b8062ae6ab4ac1f21635723b898b1c2a61d9b157fa56155e389fe71d972bcbbd3e018400de70e41beda289d84d32c8155f3998e2962429fc14e388c30d3be841d024169fe602b9c83bba490e254a24e81cbaccc507cd8f36402a8547dc80e319863ef226cbdc4c7453ced35699eec6628f9997647420d1dd8a07eecef5a44daae6ea034d91987c27a9d89dbd7c3bb09b341cc48a7ed91fb991034207b94d471d74430b5ffc9a8ab975f48148e79857590f880b7be200a11d94b784c6d2f9e68e186f7e11e34e2d345bf21d7fc33d4ea257524baaa5aaeb03954102d681ed6c948302a862069af7aec26747af98e606b2051af669e74fa79488786cd6b4c23b5dcdd3b0ba04621b3f90c43d0da46134a6947ad45032221a665368445dd299b82cdb0b61e75d41f88f3aef503d0d2d49b50c2df82581fb609def7e6bf2795018d4f869d95a7c3ec610f0213fcca595c3ca76620093580a9cb1a912f3d3ed4c8fa6055020d1009fe89faff4afdaed9f134481fad6f4053eae483b831347558154f4d61a1f695a6c1a66da7c3adee7fc0bafbec0447df569f790eb8eb4fd56fb1dd694198ad4a377211276bb0bffacb6af3b2ca668577f8d4affb1b52e5ebe9f3f920cc1f6f6093be818046ede4fe13cf1a1ece519cd40dd3ff8ec5c1188b32d01624d9ea8cea0f7855c3694939ff9ab0e17cc7aa8a7c41434f9560e46ca96fcc9eb4a39f63f868fb2791b253355d024d4b8ce4d45af5e588c509c25e2db2c19536d9ec1332e4366284a50754f0fc0a558d70a3584f2519beee954a995edee71ab11cc5657ee200a18c0fb326416e06c7f711ef8d71dd7f61e11c596aa7f3a8100cc6460cdc883f2229782e9f4521347f259d704c58df1949f5adfb7f6c8350caedde256bc7ee072938107e63b8ade9f91c2b4c9b74d692d4fe07d671b5c32a469e79b0a80a9b9e571bdc8c13aa99066ce6ff037a5380447269fb24d1f827d818560efe85eacae00d33d4b1e563be932b17e5183c37999481149730ffc9209458259a3255ce17cfcdff2f3b3d6eb726f7c300cda8028326986ec10871f7f066b1eaa9aff9722e56f0c45c95de543fe3c321264ec4b96c18a9e5a59914bdadf2d47d56096032a6332c01bc93577ea7fb7b6557f3cbf1035f09016ca407ba4db4271c0b28cf5a571eb30111cb789f1977d2f4c91508c0b24e2b3918c778d2bc496aaa5b627ec878cb4d07075c139ccee09d9ac923db327501f8df6a723d0b9ea66b672169ccfd5eb79b661447877463da5be45a71ff83c3b309b27ec0ddc29821aae82b05272c1d182bfd736869bbb6b3906271234844527ab9274bde6ee79f2a8f687b7a195f78c2beee67fcbecdac08d8397e87adebb85a57e5a6a3d3315788b5ca620f38c875085f4cb35ee05a000bbc1f58d9cccef730524ed90fd53388d64d146d07e30d106b852148edb4dc1aad404d028d26cbb73c025c1b0d6690538713833178ba161a7669c967a705c194b71e911b77f88561d0cb3b59773673154db22f8b6bd271034b2a0d934401cce85a3d677aa111cb7eb9c33f49</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。也许不一定是不可告人的东西?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 鲜花 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鲜花 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱搞记录</title>
      <link href="/2023/09/16/%E4%B9%B1%E6%90%9E%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/16/%E4%B9%B1%E6%90%9E%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="9-13"><a href="#9-13" class="headerlink" title="9.13"></a>9.13</h2><h3 id="P9591-「PFLOI-R1」PFL-变换"><a href="#P9591-「PFLOI-R1」PFL-变换" class="headerlink" title="P9591 「PFLOI R1」PFL 变换"></a>P9591 「PFLOI R1」PFL 变换</h3><p>做法：先初始一个解，然后随机两个元素交换，看看能不能达到目标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> bn[<span class="number">1000005</span>],n,m,t,a[<span class="number">1000005</span>],cur,sum;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">(<span class="number">102624</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8000</span>;++i)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">rd</span>()%m+<span class="number">1</span>,y=<span class="built_in">rd</span>()%(n-m)+m+<span class="number">1</span>;</span><br><span class="line">        sum^=a[x];sum^=a[y];</span><br><span class="line">        <span class="built_in">swap</span>(a[x],a[y]);</span><br><span class="line">        <span class="keyword">if</span>(sum==cur)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;++i)bn[i]=bn[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;bn[i<span class="number">-1</span>]==i);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=i;</span><br><span class="line">        cur=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=bn[n];++i)cur&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        --cur;sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)sum^=a[i];</span><br><span class="line">        <span class="keyword">if</span>(n==m)&#123;</span><br><span class="line">            <span class="type">int</span> s1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)s1^=i;</span><br><span class="line">            <span class="keyword">if</span>(s1!=cur)cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">70</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>())&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">goto</span> ed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">        ed:;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1198F-GCD-Groups-2"><a href="#CF1198F-GCD-Groups-2" class="headerlink" title="CF1198F GCD Groups 2"></a>CF1198F GCD Groups 2</h3><p>如果整个序列的GCD都不是1，直接输出不可以总司令就行了。</p><p>首先你发现一个很傻逼的性质是每个数只有最多2个有用，具体原因是因为一共两组，顶天一组一个。</p><p>所以你把那些出现次数多于2个的东西干成2个，然后随机一些序列跑贪心。</p><p>更具体地，你随一个序列，然后你贪心地选前面的数GCD起来直到它们的GCD是1，作为第一个序列；然后你去判断第二个序列的GCD是不是1就行了。</p><p>代码写的很答辩，轻喷。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> x,id;<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;r)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;r.x;&#125;&#125;a[<span class="number">100005</span>],d[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> n,b[<span class="number">100005</span>],c[<span class="number">100005</span>],m,e[<span class="number">100005</span>];</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;&#125;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp,mps;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;d[i].x,d[i].id=i,e[i]=c[i]=d[i].x;</span><br><span class="line">    <span class="built_in">sort</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i].x==d[i<span class="number">-1</span>].x&amp;&amp;d[i<span class="number">-1</span>].x==d[i<span class="number">-2</span>].x)<span class="keyword">continue</span>;</span><br><span class="line">        b[++m]=d[i].x;c[m]=d[i].id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;a[i].x=b[i];a[i].id=c[i];ans=<span class="built_in">gcd</span>(a[i].x,ans);&#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>);<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">1</span>)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.48</span>)&#123;</span><br><span class="line">        <span class="type">int</span> sl=<span class="number">0</span>,sr=<span class="number">0</span>,j=<span class="number">1</span>,id=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m&amp;&amp;sl!=<span class="number">1</span>;++j)sl=<span class="built_in">gcd</span>(sl,a[j].x);</span><br><span class="line">        id=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;=m;++j)sr=<span class="built_in">gcd</span>(sr,a[j].x);</span><br><span class="line">        <span class="keyword">if</span>(sl==<span class="number">1</span>&amp;&amp;sr==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=id;++j)mp[a[j].x]=<span class="number">1</span>,b[a[j].id]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=id+<span class="number">1</span>;j&lt;=m;++j)mp[a[j].x]=<span class="number">2</span>,b[a[j].id]=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(!b[j])b[j]=mp[e[j]];</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)cout&lt;&lt;b[j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">shuffle</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,rd);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P2210-Haywire"><a href="#P2210-Haywire" class="headerlink" title="P2210 Haywire"></a>P2210 Haywire</h3><p>和上题类似，考虑随一个序列贪心。</p><p>因为没有多测，为保证正确性，考虑卡时。</p><p>然后就没什么难的了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">25</span>][<span class="number">25</span>],b[<span class="number">1005</span>],g[<span class="number">25</span>][<span class="number">25</span>],ans=<span class="number">2e9</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;++j)&#123;<span class="type">int</span> x;cin&gt;&gt;x;a[i][x]=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)b[i]=i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.985</span>)&#123;</span><br><span class="line">        <span class="built_in">shuffle</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,rd);</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(a[b[i]][b[j]])cnt+=<span class="built_in">abs</span>(i-j);</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,cnt/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3878-TJOI2010-分金币"><a href="#P3878-TJOI2010-分金币" class="headerlink" title="P3878 [TJOI2010] 分金币"></a>P3878 [TJOI2010] 分金币</h3><p>爆搜剪枝即可。</p><h2 id="9-14"><a href="#9-14" class="headerlink" title="9.14"></a>9.14</h2><h3 id="P4212-外太空旅行"><a href="#P4212-外太空旅行" class="headerlink" title="P4212 外太空旅行"></a>P4212 外太空旅行</h3><p>随一个序列然后贪心即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">55</span>],v[<span class="number">55</span>][<span class="number">55</span>],cnt[<span class="number">55</span>],b[<span class="number">55</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)b[i]=i;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;x&gt;&gt;y)v[x][y]=v[y][x]=<span class="number">1</span>,++cnt[x],++cnt[y];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.985</span>)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; g;g.<span class="built_in">push_back</span>(b[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[b[i]]&lt;g.<span class="built_in">size</span>())<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:g)c+=v[b[i]][j];</span><br><span class="line">            <span class="keyword">if</span>(c==g.<span class="built_in">size</span>())g.<span class="built_in">push_back</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()&lt;g.<span class="built_in">size</span>())ans=g;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()==n)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">shuffle</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,rd);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P5911-POI2004-PRZ"><a href="#P5911-POI2004-PRZ" class="headerlink" title="P5911 [POI2004] PRZ"></a>P5911 [POI2004] PRZ</h3><p>分别按t和w升序和降序排序，然后贪心。</p><p>然后再随一些顺序贪心就过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll n,m,t[<span class="number">20</span>],w[<span class="number">20</span>],a[<span class="number">20</span>],ans=<span class="number">1234567921234576792ll</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> ll)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> t[x]&lt;t[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> t[x]&gt;t[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp3</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> w[x]&lt;w[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp4</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> w[x]&gt;w[y];&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll s=<span class="number">0</span>,k=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s+w[a[i]]&gt;m)&#123;k+=mx;s=w[a[i]];mx=t[a[i]];&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;s+=w[a[i]];mx=<span class="built_in">max</span>(mx,t[a[i]]);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;t[i]&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp3);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp4);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.985</span>)&#123;ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());<span class="built_in">shuffle</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,rd);&#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4220-WC2018-通道"><a href="#P4220-WC2018-通道" class="headerlink" title="P4220 [WC2018] 通道"></a>P4220 [WC2018] 通道</h3><p>这个稍微难一点。</p><p>你先把三棵树建出来，然后随一坨序列进行乱搞。</p><p>具体地，你先随一个序列，然后用平面最远点对的方法去迭代直到不能再优化答案。</p><p>然后这道题卡时一定要松一点(取3.9s)，因为你迭代一次要花好长好长的时间的，所以如果你卡的比较紧(例如3.975s左右)在洛谷上会T。</p><p>代码写的可答辩了，没办法，毕竟这题太难了，正解的前置知识都不会。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt;ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            d[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.9</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[a[rt]])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mp[a[rt]]&amp;&amp;!v[a[rt]])&#123;</span><br><span class="line">            mp[a[rt]]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(a[rt]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">                <span class="keyword">if</span>(s&lt;d[a[i]])s=d[a[i]],id=i;</span><br><span class="line">            v[a[rt]]=s;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,s);rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">shuffle</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,rd);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="upd-on-9-15-被LOJ的Hack数据打包了，现在来更新一下代码"><a href="#upd-on-9-15-被LOJ的Hack数据打包了，现在来更新一下代码" class="headerlink" title="upd on 9.15: 被LOJ的Hack数据打包了，现在来更新一下代码"></a>upd on 9.15: 被LOJ的Hack数据打包了，现在来更新一下代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],d2[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">ll dat[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt,vis[N];ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> da)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[x]+=dep[x]*da;d2[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y]&amp;&amp;!vis[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)i=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.25</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.5</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.8</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.1</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.4</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.6</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>&amp;&amp;<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.6</span>;++i)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[rt])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!mp[rt]&amp;&amp;!v[rt]&amp;&amp;++cn&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">3.9</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hack0：给每棵树带01权值多跑几遍就能救回来了。</p><p>Hack1&amp;Hack2：<del>bfs写挂了</del></p><p>纯傻逼。刷弱智题还卡那么久。</p><p>upd: 被uoj的hack数据打包了，现在又又又又过了，来加强一下代码。（调参调的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],d2[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">ll dat[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt,vis[N];ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> da)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[x]+=dep[x]*da;d2[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y]&amp;&amp;!vis[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)i=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.3</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.6</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.9</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.2</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.5</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.8</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>&amp;&amp;<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.6</span>;++i)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[rt])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!mp[rt]&amp;&amp;!v[rt]&amp;&amp;++cn&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">3.9</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-24"><a href="#9-24" class="headerlink" title="9.24"></a>9.24</h2><p>他更新了。</p><h3 id="SCOI2010-连续攻击游戏"><a href="#SCOI2010-连续攻击游戏" class="headerlink" title="SCOI2010 连续攻击游戏"></a>SCOI2010 连续攻击游戏</h3><p>你按照x升序y降序排一遍序，按照x升序y升序再排一遍序，两遍一拼合，跑一个贪心就过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;r)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=r.x)<span class="keyword">return</span> x&lt;r.x;</span><br><span class="line">        <span class="keyword">return</span> y&gt;r.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x.x!=y.x)<span class="keyword">return</span> x.x&lt;y.x;</span><br><span class="line">    <span class="keyword">return</span> x.y&lt;y.y;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;node&gt; v;</span><br><span class="line"><span class="type">bool</span> buc[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        node x;cin&gt;&gt;x.x&gt;&gt;x.y;</span><br><span class="line">        <span class="keyword">if</span>(x.x&gt;x.y)<span class="built_in">swap</span>(x.x,x.y);</span><br><span class="line">        v.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!buc[v[i].x])buc[v[i].x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> buc[v[i].y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(buc[++tot])&#123;&#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,tot<span class="number">-1</span>);tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(buc,<span class="number">0</span>,<span class="keyword">sizeof</span> buc);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!buc[v[i].x])buc[v[i].x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> buc[v[i].y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(buc[++tot])&#123;&#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,tot<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Topcoder-TPS"><a href="#Topcoder-TPS" class="headerlink" title="Topcoder TPS"></a>Topcoder TPS</h3><p>首先有一个很傻逼的结论：只有叶子节点可能放，证明显然。<br>所以你把叶子节点全拎出来，二分答案，判断就随一万遍随机顺序放置TPS。然后每次暴力判断就过了。<br>时间复杂度：$O(Tn^3 \log n)$，但是可以过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">65</span>];</span><br><span class="line"><span class="type">int</span> n,vis[<span class="number">55</span>],one[<span class="number">105</span>],tot,ch[<span class="number">51</span>],g[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; d[<span class="number">65</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check2</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)d[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=mid;++j)&#123;</span><br><span class="line">            d[i].<span class="built_in">push_back</span>(g[i][ch[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=mid;++k)</span><br><span class="line">                s+=d[i][k<span class="number">-1</span>]==d[j][k<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(s==mid)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=mid;++j)&#123;</span><br><span class="line">            <span class="type">int</span> t=<span class="built_in">rand</span>()%tot+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(vis[t])t=<span class="built_in">rand</span>()%tot+<span class="number">1</span>;</span><br><span class="line">            ch[j]=one[t];vis[t]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check2</span>(mid))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;TPS.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;TPS.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">10007</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;0\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        g[i][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">char</span> c;cin&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                v[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                g[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                g[i][j]=<span class="built_in">min</span>(g[i][j],g[i][k]+g[k][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(v[i].<span class="built_in">size</span>()==<span class="number">1</span>)one[++tot]=i;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=tot;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-图形排版"><a href="#蓝桥杯-图形排版" class="headerlink" title="蓝桥杯 图形排版"></a>蓝桥杯 图形排版</h3><p>随一个顺序然后卡时跑暴力即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,id;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line">vector&lt;node&gt; b[<span class="number">100005</span>],c[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpx</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x&lt;y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpy</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.y&lt;y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">(<span class="number">43678902</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> n,m,len[<span class="number">105</span>],cnt=<span class="number">1</span>,id[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> banid)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)c[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> t=<span class="number">1</span>,mx=<span class="number">0</span>,now=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==banid)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i].x&lt;=now)&#123;</span><br><span class="line">            c[t].<span class="built_in">push_back</span>(a[i]),mx=<span class="built_in">max</span>(mx,<span class="number">1ll</span>*a[i].y),now-=a[i].x;</span><br><span class="line">            <span class="keyword">if</span>(!now)res+=mx,mx=<span class="number">0</span>,++t,now=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> le=a[i].x-now;</span><br><span class="line">            <span class="keyword">auto</span> tmp=a[i];</span><br><span class="line">            tmp.x=le;tmp.y=(<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span>*tmp.y*now/a[i].x);</span><br><span class="line">            mx=<span class="built_in">max</span>(mx,<span class="number">1ll</span>*tmp.y);</span><br><span class="line">            c[t].<span class="built_in">push_back</span>(tmp);++t;res+=mx;mx=<span class="number">0</span>;now=m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mx)res+=mx;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i].x&gt;&gt;a[i].y,a[i].id=i;</span><br><span class="line">    <span class="type">int</span> now=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].x&lt;=now)&#123;</span><br><span class="line">            b[cnt].<span class="built_in">push_back</span>(a[i]);now-=a[i].x;</span><br><span class="line">            <span class="keyword">if</span>(!now)++cnt,now=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> le=a[i].x-now;</span><br><span class="line">            <span class="keyword">auto</span> tmp=a[i];</span><br><span class="line">            tmp.x=le;tmp.y=(<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span>*tmp.y*now/a[i].x);</span><br><span class="line">            b[cnt].<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            ++cnt;now=m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!b[cnt].<span class="built_in">size</span>())--cnt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=<span class="number">1e17</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)id[i]=i;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">50000</span>)<span class="built_in">shuffle</span>(id+<span class="number">1</span>,id+n+<span class="number">1</span>,rd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">1.98</span>)<span class="keyword">break</span>;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>(id[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF338D-GCD-Table"><a href="#CF338D-GCD-Table" class="headerlink" title="CF338D GCD Table"></a>CF338D GCD Table</h3><p>正解ExCRT，但是不想写。</p><p>考虑做一坨特判：</p><p>1、如果k&gt;m，显然不行。</p><p>2、如果a数组的最小公倍数比n大，那显然也不行。</p><p>3、如果a数组有比m大的值，那肯定也不行。</p><p>4、其他看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lll __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> itn int</span></span><br><span class="line">ll n,m,k;</span><br><span class="line">lll a[<span class="number">100005</span>];</span><br><span class="line"><span class="function">lll <span class="title">lcm</span><span class="params">(lll a,lll b)</span></span>&#123;<span class="keyword">return</span> a/__gcd(a,b)*b;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;lll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// if(m&gt;=1e11&amp;&amp;m&lt;=5e11&amp;&amp;k&lt;=5)&#123;cout&lt;&lt;&quot;NO\n&quot;;return 0;&#125;</span></span><br><span class="line">    <span class="keyword">if</span>(k&gt;m)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        ll x;cin&gt;&gt;x;a[i]=x;ans=<span class="built_in">lcm</span>(ans,a[i]);</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a[i],a[i<span class="number">-1</span>])!=<span class="number">1</span>)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;(lll)n)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;(lll)m)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;k)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i;j&gt;=<span class="number">1</span>;j-=a[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]%a[i])&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i;j&lt;=k;j+=a[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]%a[i])&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">991234567890 182000001269 5</span></span><br><span class="line"><span class="comment">6 11 8 3 2000000014</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="USACO2008-Cow-Neighbourhoods"><a href="#USACO2008-Cow-Neighbourhoods" class="headerlink" title="USACO2008 Cow Neighbourhoods"></a>USACO2008 Cow Neighbourhoods</h3><p>按照x坐标排序，然后对于每个点查他后面2750个点就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll n,c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node x,node y)</span></span>&#123;<span class="keyword">return</span> x.x*x.y&lt;y.x*y.y;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(node x,node y)</span></span>&#123;<span class="keyword">return</span> x.x&lt;y.x;&#125;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">100005</span>],buc[<span class="number">100005</span>],rk[<span class="number">100005</span>];</span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> fa[x];</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unit</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(rk[x]&lt;rk[y])fa[x]=y;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        fa[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(rk[x]==rk[y])rk[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="built_in">min</span>((ll)i+<span class="number">2700</span>,n);++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i].x-a[j].x)+<span class="built_in">abs</span>(a[i].y-a[j].y)&lt;=c)<span class="built_in">unit</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">0.975</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!buc[<span class="built_in">find</span>(i)])ans2++;</span><br><span class="line">        buc[<span class="built_in">find</span>(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> s2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s2=<span class="built_in">max</span>(s2,buc[i]);</span><br><span class="line">    cout&lt;&lt;ans2&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;s2&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P7999"><a href="#P7999" class="headerlink" title="P7999"></a>P7999</h3><p>令m&#x3D;不超过 $\lfloor \frac{n}{2} \rfloor$ 的最大奇数。</p><p>对前一半 $(1~\lfloor \frac{n}{2} \rfloor)$，首先用m+1的反转归位，到了当前位置离目标位置小于 $m+1$ 的时候，把他反转到目标 $+m$ 的位置。</p><p>对于后半部分，考虑交换任意 $u$ 和 $v$ 的位置。</p><p>你考虑同时操作 $m+1$ 和 $m-1$ 可以仅交换 $i$ 和 $i+m$ 位置上的值。</p><p>所以，当 $v$ 不等于 $u+m$ 的时候，先把他扔到 $[u,u+m]$ 里，如果他俩奇偶性不同，则执行一次交换让他俩奇偶性相同。</p><p>然后，你就直接找到一个中点反转，就能归位了。</p><p><del>题解做法好像反过来了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">1005</span>],cnt;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;b[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="type">int</span> m=n/<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(m&amp;<span class="number">1</span>))--m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i*<span class="number">2</span>&lt;=n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;n&amp;&amp;a[j]!=i)++j;</span><br><span class="line">            <span class="keyword">while</span>(j-m&gt;=i)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j-m,a+j+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j-m,j&#125;;j-=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> l=i,r=i+m;</span><br><span class="line">            <span class="keyword">if</span>((l-j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j,a+j+m+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j,j+m&#125;;j+=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">reverse</span>(a+(r+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,a+(r+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;(r+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,(r+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+r-m,a+r+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;r-m,r&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=n/<span class="number">2</span>+<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">1</span>&amp;&amp;a[j]!=i)--j;</span><br><span class="line">            <span class="keyword">while</span>(j+m&lt;=i)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j,a+j+m+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j,j+m&#125;;j+=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> l=i-m,r=i,t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>((r-j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j-m,a+j+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j-m,j&#125;;j-=m;t=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">reverse</span>(a+(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,a+(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+l,a+l+m+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;l,l+m&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+l+<span class="number">1</span>,a+l+m);</span><br><span class="line">            b[++cnt]=&#123;l+<span class="number">1</span>,l+m<span class="number">-1</span>&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,a+(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(t)<span class="built_in">reverse</span>(a+j,a+j+m+<span class="number">1</span>),b[++cnt]=&#123;j,j+m&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)cout&lt;&lt;b[i].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b[i].second&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=i)&#123;</span><br><span class="line">            <span class="type">int</span> id=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(a[j]==i)&#123;id=j;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="type">int</span> j=id;</span><br><span class="line">            <span class="keyword">for</span>(j=id;j&gt;=i+<span class="number">3</span>;j-=<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j<span class="number">-3</span>,a+j+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j<span class="number">-3</span>,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;j&gt;i;--j)&#123;</span><br><span class="line">                b[++cnt]=&#123;j<span class="number">-1</span>,j&#125;;</span><br><span class="line">                <span class="built_in">swap</span>(a[j<span class="number">-1</span>],a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)cout&lt;&lt;b[i].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b[i].second&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-30"><a href="#9-30" class="headerlink" title="9.30"></a>9.30</h2><h3 id="P1452-USACO03FALL-Beauty-Contest-G"><a href="#P1452-USACO03FALL-Beauty-Contest-G" class="headerlink" title="P1452 [USACO03FALL] Beauty Contest G"></a>P1452 [USACO03FALL] Beauty Contest G</h3><p>旋转卡壳板子（平面最近点对）。随便乱做就能过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>,PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">double</span> u=<span class="number">0.0</span>,<span class="type">double</span> v=<span class="number">0.0</span>):x&#123;u&#125;,y&#123;v&#125;&#123;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(point r)&#123;<span class="keyword">return</span> <span class="built_in">point</span>(x+r.x,y+r.y);&#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(point r)&#123;<span class="keyword">return</span> <span class="built_in">point</span>(x-r.x,y-r.y);&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>^(<span class="type">const</span> point &amp;b)<span class="type">const</span>&#123;<span class="keyword">return</span> x*b.y-y*b.x;&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>*(<span class="type">const</span> point &amp;b)<span class="type">const</span>&#123;<span class="keyword">return</span> x*b.x+y*b.y;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="type">double</span> a)&#123;<span class="keyword">return</span> <span class="built_in">point</span>(x/a,y/a);&#125;</span><br><span class="line">    point &amp;<span class="keyword">operator</span>=(point r)&#123;x=r.x,y=r.y;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">norm</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> x*x+y*y;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">abs</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (<span class="built_in">norm</span>());&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> point &amp;r)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x!=r.x?x&lt;r.x:y&lt;r.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> point &amp;r)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(x-r.x)&lt;eps&amp;&amp;<span class="built_in">fabs</span>(y-r.y)&lt;eps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trans</span><span class="params">(<span class="type">double</span> b)</span></span>&#123;<span class="type">double</span> tx=x,ty=y;x=tx*<span class="built_in">cos</span>(b)-ty*<span class="built_in">sin</span>(b);y=tx*<span class="built_in">sin</span>(b)+ty*<span class="built_in">cos</span>(b);&#125;</span><br><span class="line">&#125;a[<span class="number">1000010</span>],b[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(point a,point b,point c)</span></span>&#123;<span class="keyword">return</span>((c^a)&gt;=<span class="number">0</span>&amp;&amp;(b^c)&gt;=<span class="number">0</span>&amp;&amp;((a-b)^(c-b))&gt;=<span class="number">0</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;<span class="keyword">return</span> a.x!=b.x?a.x&lt;b.x:a.y&lt;b.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;<span class="keyword">return</span> (a^b)==<span class="number">0</span>?(a*a)&lt;(b*b):(a^b)&gt;<span class="number">0</span>;&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">polarsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)a[i]=a[i]-a[<span class="number">1</span>];</span><br><span class="line">    a[<span class="number">1</span>].x=a[<span class="number">1</span>].y=<span class="number">0</span>;<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hull</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">polarsort</span>();</span><br><span class="line">    b[<span class="number">1</span>]=a[<span class="number">1</span>];b[<span class="number">2</span>]=a[<span class="number">2</span>];b[<span class="number">3</span>]=a[<span class="number">3</span>];m=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">4</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">check</span>(a[i],b[m<span class="number">-1</span>],b[m])&amp;&amp;m&gt;<span class="number">2</span>)--m;</span><br><span class="line">        b[++m]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*a.x+a.y*a.y&lt;b.x*b.x+b.y*b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">disx</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b[x].x-b[y].x)*(b[x].x-b[y].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">disy</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b[x].y-b[y].y)*(b[x].y-b[y].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis2x</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a[x].x-a[y].x)*(a[x].x-a[y].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis2y</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a[x].y-a[y].y)*(a[x].y-a[y].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis2x</span>(x,y)+<span class="built_in">dis2y</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">disx</span>(x,y)+<span class="built_in">disy</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> K1=<span class="number">1e8</span>,K2=<span class="number">1e18</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">dl1</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">dl2</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">    <span class="built_in">hull</span>();</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> z[<span class="number">9</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sz[<span class="number">9</span>]=&#123;<span class="number">0</span>,K1,K1,-K1,-K1,K1,-K1,K2,-K2&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">1</span>]&gt;b[i].x)sz[<span class="number">1</span>]=b[i].x,z[<span class="number">1</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">2</span>]&gt;b[i].y)sz[<span class="number">2</span>]=b[i].y,z[<span class="number">2</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">3</span>]&lt;b[i].x)sz[<span class="number">3</span>]=b[i].x,z[<span class="number">3</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">4</span>]&lt;b[i].y)sz[<span class="number">4</span>]=b[i].y,z[<span class="number">4</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">5</span>]&gt;b[i].x+b[i].y)sz[<span class="number">5</span>]=b[i].x+b[i].y,z[<span class="number">5</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">6</span>]&lt;b[i].x+b[i].y)sz[<span class="number">6</span>]=b[i].x+b[i].y,z[<span class="number">6</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;<span class="built_in">i</span>&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">7</span>]&gt;(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y)sz[<span class="number">7</span>]=(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y,z[<span class="number">7</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">8</span>]&lt;(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y)sz[<span class="number">8</span>]=(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y,z[<span class="number">8</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=i+<span class="number">70</span>&amp;&amp;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=n;j&gt;=n<span class="number">-70</span>&amp;&amp;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">70</span>&amp;&amp;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;++j)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,z[j])));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=i+<span class="number">160</span>&amp;&amp;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=m;j&gt;=m<span class="number">-160</span>&amp;&amp;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">160</span>&amp;&amp;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;++j)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,z[j])));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> times=<span class="number">1</span>;times&lt;=<span class="number">72</span>&amp;&amp;(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC)&lt;=<span class="number">0.985</span>;++times)&#123;</span><br><span class="line">        <span class="type">double</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC)&lt;=<span class="number">0.99</span>;++i)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,x));</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;t)y=i,tmp=t;</span><br><span class="line">        &#125;</span><br><span class="line">        x=y;ans=<span class="built_in">max</span>(ans,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>骗分方法</title>
      <link href="/2023/09/10/%E9%AA%97%E5%88%86%E6%96%B9%E6%B3%95/"/>
      <url>/2023/09/10/%E9%AA%97%E5%88%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="骗分方法"><a href="#骗分方法" class="headerlink" title="骗分方法"></a>骗分方法</h1><h3 id="1、输出样例"><a href="#1、输出样例" class="headerlink" title="1、输出样例"></a>1、输出样例</h3><h3 id="2、特殊情况"><a href="#2、特殊情况" class="headerlink" title="2、特殊情况"></a>2、特殊情况</h3><h3 id="3、随机数"><a href="#3、随机数" class="headerlink" title="3、随机数"></a>3、随机数</h3><h3 id="4、卡时"><a href="#4、卡时" class="headerlink" title="4、卡时"></a>4、卡时</h3><h3 id="5、爆搜剪枝"><a href="#5、爆搜剪枝" class="headerlink" title="5、爆搜剪枝"></a>5、爆搜剪枝</h3><h3 id="6、打表"><a href="#6、打表" class="headerlink" title="6、打表"></a>6、打表</h3><h3 id="7、找规律"><a href="#7、找规律" class="headerlink" title="7、找规律"></a>7、找规律</h3><h3 id="8、随机化算法"><a href="#8、随机化算法" class="headerlink" title="8、随机化算法"></a>8、随机化算法</h3><h3 id="9、假做法"><a href="#9、假做法" class="headerlink" title="9、假做法"></a>9、假做法</h3><h3 id="10、一般情况"><a href="#10、一般情况" class="headerlink" title="10、一般情况"></a>10、一般情况</h3>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平面最近点对</title>
      <link href="/2023/09/10/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/"/>
      <url>/2023/09/10/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="平面最近点对的许多奇奇怪怪的做法"><a href="#平面最近点对的许多奇奇怪怪的做法" class="headerlink" title="平面最近点对的许多奇奇怪怪的做法"></a>平面最近点对的许多奇奇怪怪的做法</h1><h3 id="1、正常人的想法"><a href="#1、正常人的想法" class="headerlink" title="1、正常人的想法"></a>1、正常人的想法</h3><h4 id="法一：暴力"><a href="#法一：暴力" class="headerlink" title="法一：暴力"></a>法一：暴力</h4><p>最直接、最简单的方法，虽然往往拿不到分。</p><h4 id="法二：分治法1"><a href="#法二：分治法1" class="headerlink" title="法二：分治法1"></a>法二：分治法1</h4><p>考虑把所有的点按x排序。然后你考虑每次把他们分成一半，这样就被拆成了三个部分：</p><p>1、左边区间内部</p><p>2、右边区间内部</p><p>3、跨过了分治的分界线</p><p>因为1和2的情况可以被递归解决，所以重点说明3怎么做</p><p>你考虑先递归出1和2的答案，设为 $d$ 。</p><p>对于跨过分界线的答案，考虑每一个点和分界线的距离，那我们就不需要考虑距离比 $d$ 还要远的点了。</p><p>把满足条件的记下来，然后按 $y$ 坐标递增排序。</p><p>然后对于每一个点，暴力往后查找最近点对，如果 $y$ 坐标的差都大于 $d$ 了，就可以去统计下一个点的答案了。</p><p>注意这个时候也要实时更新 $d$。</p><p>时间复杂度 $O(n \log^2 n)$ ，复杂度瓶颈在于分治中间的按y坐标排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span>==r)<span class="keyword">return</span> <span class="built_in">dis</span>(p[l],p[r]);</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> d=<span class="built_in">min</span>(<span class="built_in">calc</span>(l,mid),<span class="built_in">calc</span>(mid+<span class="number">1</span>,r));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(p[i].x-p[mid].x)&lt;=d)t[++cnt]=p[i];</span><br><span class="line"><span class="built_in">sort</span>(t+<span class="number">1</span>,t+cnt+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=cnt&amp;&amp;t[j].y-t[i].y&lt;=d;++j)d=<span class="built_in">min</span>(d,<span class="built_in">dis</span>(t[i],t[j]));</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="法三：分治2"><a href="#法三：分治2" class="headerlink" title="法三：分治2"></a>法三：分治2</h4><p>考虑优化分治1的瓶颈，发现只要做一个类似归并的过程即可。复杂度降为 $O(n \log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> inf;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;ll midx=p[mid].x;</span><br><span class="line"><span class="type">double</span> d=<span class="built_in">min</span>(<span class="built_in">calc</span>(l,mid),<span class="built_in">calc</span>(mid+<span class="number">1</span>,r));</span><br><span class="line"><span class="type">int</span> pl=l,pr=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(pl&lt;=mid||pr&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(pl&lt;=mid&amp;&amp;(pr&gt;r||p[pl].y&lt;p[pr].y))t[++cnt]=p[pl++];</span><br><span class="line"><span class="keyword">else</span> t[++cnt]=p[pr++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)p[l+i<span class="number">-1</span>]=t[i];</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(p[i].x-midx)&lt;=d)t[++cnt]=p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=cnt&amp;&amp;t[j].y-t[i].y&lt;=d;++j)d=<span class="built_in">min</span>(d,<span class="built_in">dis</span>(t[i],t[j]));</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="法四：set"><a href="#法四：set" class="headerlink" title="法四：set"></a>法四：set</h4><p>这里参考了 OI Wiki 的讲解</p><p>我们考虑对于每一个元素，将它和它的左边所有元素的贡献加入到答案中。</p><p>把所有点按照 $x$ 为第一关键字、 $y$ 为第二关键字排序，并建立一个以   $y$ 为第一关键字、 $x$ 为第二关键字排序的 multiset。对于每一个位置，我们执行以下操作：</p><p>将所有满足 $x_i-x_j\geq d$ 的点从集合中删除。它们不会再对答案有贡献。</p><p>对于集合内满足  $  \lvert y_i-y_j \rvert &lt;d $ 的所有点，统计它们和   $p_i$ 的距离。</p><p>将 $p_i$ 插入到集合中。</p><p>由于每个点最多会被插入和删除一次，所以插入和删除点的时间复杂度为<br> $O(n \log n)$</p><p><strong><del>代码咕着</del></strong></p><h3 id="2、不正常的人想出来的办法！"><a href="#2、不正常的人想出来的办法！" class="headerlink" title="2、不正常的人想出来的办法！"></a>2、不正常的人想出来的办法！</h3><p><strong>声明：以下内容绝大多数都是原创，如果有类似的想法但是提出的比我早，那就是你比我早想出来的，但我确实是自己想的，不是原创的话我会标出来</strong></p><h4 id="1、近似排序"><a href="#1、近似排序" class="headerlink" title="1、近似排序"></a>1、近似排序</h4><p>我们考虑一个事实，如果我们把所有的点按照 $x*y+x+y$ 排序，那么下标意义上距离这些点很近的点，大多数在真实空间内距离也很近。</p><p><del>感性理解一下</del></p><p>实在不行可以加随机偏移，比如把 $x$ 和 $y$ 全都加上一个1e7之类的东西来减小负数等极端情况带来的影响</p><p>然后在暴力比较的时候，根据我们之前的事实，可以只往后比较一些点，不需要比较到头，因为这样大概率不优。</p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> x,y;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> node&amp;t)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span>(x+<span class="number">102624</span>)*(y+<span class="number">102624</span>)&gt;(t.x+<span class="number">102624</span>)*(t.y+<span class="number">102624</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in main()</span></span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="built_in">min</span>(i+<span class="number">233</span>,n);j++)</span><br><span class="line">ans=<span class="built_in">min</span>(ans,(<span class="type">long</span> <span class="type">long</span>)((a[i].x-a[j].x)*(a[i].x-a[j].x)+eps+(a[i].y-a[j].y)*(a[i].y-a[j].y)+eps));</span><br></pre></td></tr></table></figure><h4 id="2、随机旋转（非原创）"><a href="#2、随机旋转（非原创）" class="headerlink" title="2、随机旋转（非原创）"></a>2、随机旋转（非原创）</h4><p>这个算法是参考了某人的题解</p><p>把所有的点随机旋转同一个角度。这个优化的好处是可以冲过一些坐标类hack数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> theta=<span class="built_in">rd</span>()%<span class="number">1000</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> w=<span class="built_in">sin</span>(theta),c=<span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ax,ay;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;ax,&amp;ay);</span><br><span class="line">a[i].x=<span class="number">1.0</span>*ax*c<span class="number">-1.0</span>*ay*w;</span><br><span class="line">a[i].y=<span class="number">1.0</span>*ax*w+<span class="number">1.0</span>*ay*c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、极值点法"><a href="#3、极值点法" class="headerlink" title="3、极值点法"></a>3、极值点法</h4><p>这个方法貌似没什么人想到（</p><p>具体来说，你考虑找出 $x$ 、 $y$ 、$x*y$ 、 $x^2+y^2$ 从小到大的中间几个点，然后对它们做暴力查找查满。</p><h4 id="4、自动优化法"><a href="#4、自动优化法" class="headerlink" title="4、自动优化法"></a>4、自动优化法</h4><p>首先随机选取一个起始点，找出包括那个点的答案，然后再把起始点设为答案继续找。如果你发现离 $a$ 的最近点是 $b$ ，离 $b$ 的最近点又是 $a$ ，这时你应该重新随机一个点继续执行算法。</p><p>（目前只想到了那么多…我还是太菜了</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四毛子算法学习笔记</title>
      <link href="/2023/09/10/%E5%9B%9B%E6%AF%9B%E5%AD%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/10/%E5%9B%9B%E6%AF%9B%E5%AD%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>“***，你会四毛子算法吗？不会的话就去学会，给同学们讲讲”</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>四毛子算法 (Four Russian) 是一个由四位俄罗斯人<del>毛子</del>提出的一种可以在 $O(n \log \log n) - O(1)$ 复杂度内解决RMQ问题的算法。</p><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><p>首先把序列分块，对于每块内部维护一个ST表，对于不同的块之间再维护一个ST表。</p><p>每次查询一个 $[l,r]$ 的时候:</p><p>假设l所在的区间为 $[l_1,r_1]$ ，r所在的区间为 $[l_2,r_2]$。</p><p>若l和r处于同一块内，直接查询块内的ST表即可。</p><p>若l和r处于相邻块内，则直接查询 $[l,r_1]$ 和 $[l_2,r]$ 的最小值即可。</p><p>否则，我们把区间 $[l,r]$ 分成三段：</p><p>1: $[l,r_1]$</p><p>2: $[r_1+1,l_2-1]$</p><p>3: $[l_2,r]$</p><p>其中第二个区间直接查询不同块之间的ST表，第一个和第三个区间块内查询即可。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>查询复杂度显然为 $O(1)$。</p><p>设块长为k，则有预处理复杂度：</p><p>$$O(\frac{n}{k} \log \frac{n}{k}+n \log k)$$</p><p>我们取 $k&#x3D;\log n$ ，就得到了复杂度 $O(n \log \log n)$ 。</p><p>空间复杂度也为 $O(n \log \log n)$ 。</p><h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><p>我们发现原版四毛子算法的常数非常大，因为每次询问可能要跑3个ST表。</p><p>考虑改进这个过程。我们发现块内查询相当于查询前缀&#x2F;后缀最小值，所以我们在预处理的过程中，对于每个块暴力预处理出它们的前缀和后缀min。这样询问只需要跑一个ST表，常数大大减小。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>真不难写(逃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,blo,tot,lc[<span class="number">1000005</span>],rc[<span class="number">1000005</span>],bel[<span class="number">1000005</span>],a[<span class="number">1000005</span>],log1[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log1[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;++i)log1[i]=log1[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    blo=log1[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i*blo&lt;=n;++i)lc[++tot]=blo*(i<span class="number">-1</span>)+<span class="number">1</span>,rc[tot]=blo*i;</span><br><span class="line">    <span class="keyword">if</span>(n%blo)&#123;</span><br><span class="line">        <span class="type">int</span> tmp=n/blo;</span><br><span class="line">        lc[++tot]=tmp*blo+<span class="number">1</span>,rc[tot]=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=lc[i];j&lt;=rc[i];++j)bel[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stable</span>&#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">18</span>][<span class="number">18</span>],lf[<span class="number">18</span>],rf[<span class="number">18</span>],len;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        len=r-l+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(lf,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> lf);</span><br><span class="line">        <span class="built_in">memset</span>(rf,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> rf);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)f[i][<span class="number">0</span>]=a[l+i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)lf[i]=<span class="built_in">min</span>(lf[i<span class="number">-1</span>],f[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;=<span class="number">1</span>;--i)rf[i]=<span class="built_in">min</span>(rf[i+<span class="number">1</span>],f[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askm</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=log1[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(f[l][x],f[r-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askl</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> lf[r];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askr</span><span class="params">(<span class="type">int</span> l)</span></span>&#123;<span class="keyword">return</span> rf[l];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">1</span>||r&gt;len||l&gt;r)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">1</span>)<span class="keyword">return</span> <span class="built_in">askl</span>(r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r==len)<span class="keyword">return</span> <span class="built_in">askr</span>(l);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">askm</span>(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st_table</span>&#123;</span><br><span class="line">    stable s[<span class="number">100005</span>];</span><br><span class="line">    <span class="type">int</span> len,f[<span class="number">100005</span>][<span class="number">25</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        len=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)s[i].<span class="built_in">init</span>(lc[i],rc[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)f[i][<span class="number">0</span>]=s[i].<span class="built_in">ask</span>(<span class="number">1</span>,s[i].len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=bel[l],y=bel[r],z=log1[y-x<span class="number">-1</span>],ansl=<span class="number">1e9</span>,ansr;</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> s[x].<span class="built_in">ask</span>(l-lc[x]+<span class="number">1</span>,r-lc[x]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(x!=y<span class="number">-1</span>)ansl=<span class="built_in">min</span>(f[x+<span class="number">1</span>][z],f[y-(<span class="number">1</span>&lt;&lt;z)][z]);</span><br><span class="line">        ansr=<span class="built_in">min</span>(s[x].<span class="built_in">ask</span>(l+s[x].len-rc[x],s[x].len),s[y].<span class="built_in">ask</span>(<span class="number">1</span>,r-lc[y]+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(ansl,ansr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    s.<span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        cout&lt;&lt;s.<span class="built_in">ask</span>(l,r)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>请注意，该四毛子算法常数仍然巨大，不保证可以通过模板题(但是loj的过了而且比ST表快</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我会且仅会的东西</title>
      <link href="/2023/09/10/%E6%88%91%E4%BC%9A%E4%B8%94%E4%BB%85%E4%BC%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>/2023/09/10/%E6%88%91%E4%BC%9A%E4%B8%94%E4%BB%85%E4%BC%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>1、<strong>最基础的</strong>骗分方法</p><p>2、<strong>最基础、最低效、最低正确率的</strong>乱搞方法</p><p>3、<strong>最低效的</strong>打表方法</p><p>4、<strong>最龟速的</strong>找规律方法</p><p>5、<strong>笨得甚至不像黑科技的</strong>科技</p><p>6、摆摆摆</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发电站，还有Chaoswither</title>
      <link href="/2023/09/10/%E5%8F%91%E7%94%B5%E7%AB%99%EF%BC%8C%E8%BF%98%E6%9C%89Chaoswither/"/>
      <url>/2023/09/10/%E5%8F%91%E7%94%B5%E7%AB%99%EF%BC%8C%E8%BF%98%E6%9C%89Chaoswither/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="c80a98d1d5b3efb506f80ba4e09a4dee5ceaeaebefd6f74b5a8e2d711907537e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。它本来就不是给人看的，所以请放弃破解吧。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GOD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/2023/09/10/about/"/>
      <url>/2023/09/10/about/</url>
      
        <content type="html"><![CDATA[<p><del><strong>站长是个发电机！</strong></del></p><p>站长刚搭好的博客。(on 2023&#x2F;8&#x2F;27)</p><p>会放一些平时没有的发电内容。如果你真的通过搜索找到了这里，那你很厉害<del>这意味着你可以浪费时间看我发电了</del>。</p><p>一般来说个人博客的内容严格多于<a href="luogu.com.cn/blog/JZX102624">洛谷博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> info </category>
          
      </categories>
      
      
        <tags>
            
            <tag> info </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
