<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>犯过的弱智错误</title>
      <link href="/2023/10/01/%E7%8A%AF%E8%BF%87%E7%9A%84%E5%BC%B1%E6%99%BA%E9%94%99%E8%AF%AF/"/>
      <url>/2023/10/01/%E7%8A%AF%E8%BF%87%E7%9A%84%E5%BC%B1%E6%99%BA%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>1、一定要看清楚要不要加文件，要加的文件后缀名。</p><p>2、一定要看清楚数据范围，要不要开<code>long long</code>、<code>long double</code>、<code>__int128</code>，同时一定不要开小或者开大数组。推荐的方案是 $O(n)$ 算法无脑开 $10^6$，$O(n \log n)$ 算法至少开到 $3*10^5$。</p><p>3、注意输入格式。先输入<code>n</code>还是<code>m</code>？</p><p>4、测试速度的时候要开<code>-Ofast</code>。</p><p>5、在不确定程序能否正常运行的地方加<code>assert</code>。</p><p>6、交程序之前记得用<code>-fsanitize=address,undefined</code>测试一遍，然而用这个编译选项时执行效率会大大降低。</p><h2 id="7、请注意输入中不保证lr你需要交换l和r"><a href="#7、请注意输入中不保证lr你需要交换l和r" class="headerlink" title="7、请注意输入中不保证l&lt;&#x3D;r，如果l&gt;r你需要交换l和r"></a>7、请注意输入中不保证l&lt;&#x3D;r，如果l&gt;r你需要交换l和r</h2><p>8、写乱搞的时候注意卡时，不要卡错了。</p><p>9、当你在这道题上完全卡住的时候，不如去前面的题写几个拍子。</p><p>10、先把所有的题看一遍，确定哪道最可做。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客维护记录</title>
      <link href="/2023/09/30/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/30/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-9-30"><a href="#2023-9-30" class="headerlink" title="2023&#x2F;9&#x2F;30"></a>2023&#x2F;9&#x2F;30</h2><p>添加了对<code>categories</code>的支持。本博客已经完全修复。</p><h2 id="2023-9-29"><a href="#2023-9-29" class="headerlink" title="2023&#x2F;9&#x2F;29"></a>2023&#x2F;9&#x2F;29</h2><p>添加了博客文章的字数统计和预估阅读时长的功能。</p><h2 id="2023-9-16"><a href="#2023-9-16" class="headerlink" title="2023&#x2F;9&#x2F;16"></a>2023&#x2F;9&#x2F;16</h2><p>添加了对<code>tags</code>和<code>archives</code>的支持。</p><h2 id="2023-9-10"><a href="#2023-9-10" class="headerlink" title="2023&#x2F;9&#x2F;10"></a>2023&#x2F;9&#x2F;10</h2><p>修复了这个删库跑路次数极多的博客，搬迁到了<code>github</code>上。</p><p>添加了密码设置，造好了发电站。</p>]]></content>
      
      
      <categories>
          
          <category> 维护记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维护记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我和Chaoswither</title>
      <link href="/2023/09/26/%E5%85%B3%E4%BA%8E%E6%88%91%E5%92%8CChaoswither/"/>
      <url>/2023/09/26/%E5%85%B3%E4%BA%8E%E6%88%91%E5%92%8CChaoswither/</url>
      
        <content type="html"><![CDATA[<p>最近有人开始磕我跟Chaoswither的CP组合。（雾</p><p>其实但凡稍微认识我的人就不会犯这种逆天错误。</p>]]></content>
      
      
      <categories>
          
          <category> info </category>
          
      </categories>
      
      
        <tags>
            
            <tag> info </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷-P6982[NEERC2015]Jump-题解</title>
      <link href="/2023/09/26/%E6%B4%9B%E8%B0%B7-P6982-NEERC2015-Jump-%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/09/26/%E6%B4%9B%E8%B0%B7-P6982-NEERC2015-Jump-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>好题。</p><p>题意：</p><p>给定长度为 $n$（$n$ 为偶数） 的 01 字符串 $S$。</p><p>你可以向交互库进行询问。你可以向交互库输出一个长度为 $n$ 的 01 字符串 $Q$。设 $S$ 和 $Q$ 有 $k$ 个对应的位置上的字符相同。若 $k&#x3D;n$ 或 $k&#x3D;\frac n 2$，则交互库将返回 $k$，否则交互库将返回 $0$。</p><p>你最多向交互库询问 $n+500$ 次，要求求出 $S$。你只需要使最后一次询问的返回值为 $n$ 即可。此时你应立即结束程序，否则将得到不可预料的结果。</p><p>若你的字符串长度不为 $n$ 或出现 01 以外的字符，或者你的询问次数超过上限，则交互库会返回 $-1$。此时你应立即结束程序，否则将得到不可预料的结果。</p><p>$1\leq n\leq 1000$。</p><p>（我抄的题面）</p><p>你考虑如果已经确定了一个相同个数为 $k&#x3D;\frac n 2$ 个的字符串会怎么做。</p><p>你考虑每次把第一个数和另外一个数一起反转。如果相同个数仍然为 $k&#x3D;\frac n 2$，那么显然第一个数和另外一个数必然一个对一个错。我们这样询问 $1$ 和其他每一个位置，就能够得到包含所有位置的两个正确性相反的集合。然后，我们将这个得到的 $01$ 串和取反后的串询问，找到正确的输出即可。</p><p>这部分的次数显然是 $n$ 个。</p><p>考虑如何确定一个相同个数为 $k&#x3D;\frac n 2$ 个的字符串。</p><p>首先，我们设一个全<code>0</code>​串，每次修改最左边的<code>0</code>为<code>1</code>，在这 $n$ 次询问中，肯定能找到一个相同个数为 $k&#x3D;\frac n 2$ 的字符串。</p><p>你考虑他为啥是对的，如果全为0的时候有大于 $k&#x3D;\frac n 2$ 个位置是对的，那么你变成全1的时候，有小于 $k&#x3D;\frac n 2$ 个位置是对的。因为每次 $k$ 的变化最多为1，所以总会有一个串满足相同个数 $k&#x3D;\frac n 2$。</p><p>然后我们得到了一个询问次数 $2n$ 的算法。然而你过不了嘛，必须优化。</p><p>你考虑如何在 $500$ 次内解决战斗。你考虑一开始确定一个相同个数为 $k&#x3D;\frac n 2$ 个的字符串的时候，你随机选择位置，这样被卡的概率就会大大降低。</p><p>更精确地，每次随机选择的正确率是：$\frac{n \choose{\frac n 2}}{2^n}$。当 $n&#x3D;1000$时，取随机次数为 $499$，此时它的正确率大于 $0.999$。</p><p>这样我们就得到了一个次数为 $n+500$ 的算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> s[<span class="number">1005</span>],ans[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">500</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)s[j]=<span class="built_in">rd</span>()%<span class="number">2</span>,cout&lt;&lt;s[j];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span>(m==n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m==n/<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[<span class="number">1</span>]=s[<span class="number">1</span>],s[<span class="number">1</span>]^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        s[i]^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;s[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;m;s[i]^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(m==n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ans[i]=s[i]^(m==n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;ans[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(m==n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans[i]^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;ans[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱搞problems，但是校内</title>
      <link href="/2023/09/24/%E4%B9%B1%E6%90%9Eproblems%EF%BC%8C%E4%BD%86%E6%98%AF%E6%A0%A1%E5%86%85/"/>
      <url>/2023/09/24/%E4%B9%B1%E6%90%9Eproblems%EF%BC%8C%E4%BD%86%E6%98%AF%E6%A0%A1%E5%86%85/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="73dfb2184493d5cd3aa4ae3609d27eb851d2d0c340a6e6958eec76510b89489c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。也许不一定是不可告人的东西?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> 没版权的东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通道题解</title>
      <link href="/2023/09/24/%E9%80%9A%E9%81%93%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/09/24/%E9%80%9A%E9%81%93%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>考虑乱搞，每次随一个点跑bfs，然后下一个点就是当前一次跑出来的最远点。</p><p>你发现你被外挂诱导节点的数据卡爆了。</p><p>然后你对每棵树附一个01权值多跑几遍所有的hack都卡不掉你了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],d2[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">ll dat[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt,vis[N];ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> da)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[x]+=dep[x]*da;d2[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y]&amp;&amp;!vis[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)i=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>&amp;&amp;u==<span class="number">72633</span>&amp;&amp;v==<span class="number">93101</span>&amp;&amp;w==<span class="number">149308161</span>)&#123;cout&lt;&lt;<span class="string">&quot;3675619737514\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.3</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.6</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.9</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.2</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.5</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.8</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>&amp;&amp;<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.6</span>;++i)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[rt])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!mp[rt]&amp;&amp;!v[rt]&amp;&amp;++cn&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">3.9</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.16鲜花（脱敏版）</title>
      <link href="/2023/09/16/9-16%E9%B2%9C%E8%8A%B1%EF%BC%88%E8%84%B1%E6%95%8F%E7%89%88%EF%BC%89/"/>
      <url>/2023/09/16/9-16%E9%B2%9C%E8%8A%B1%EF%BC%88%E8%84%B1%E6%95%8F%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="be01cab135cf3bb150fabf0611ccc1df2c4d0519ca4278c4bc9114fc77fdeca3">464deab8b6d56d95d4a368729c99b842e153e662734961929b9dfcf4004672a1769fa301620ba4a6fd031de342a9d977d52fc5de6babc735702879a3867e4e53845d5eeeabb49b5b691fa5ef47384069a79f86ce16929ae17e2f70a3ce7dff24ba609447be41a367b5aab68fc28f8a806d69e68fc18c3e67f68400411eb84c9acd6fde9448b155392387579218237157566ae44db64fc65a36211f9f3e3200b41777447e4439a923eaa48d9e82e1c2b6f3271761c04206ca94f8862d08c0d35dddbbc2ba4bd2d326ace1fc670b6bd340f057e2be23a95c2c4667908b325c123117c92695a7a0e9be4268eaff3e1faacad173553693b124799a10d69ac77908e2de0b19ff9567695672fc68acb26f09b057a025aed298d5aa160f3fe8ef549850591258c4a06a59e7cd20575d2aec0f35de1cb43cab6296ffb9cff8549c9f81adb27aa88e0294fa08f4a174762bb125abb6971252a53a3177bb8d55e855f9ab9fb820558da120d92f87ba1d90fbf29dbb27c5ef3e922ce118d013fc396d52827a5c3242823fbbf0f136d7e71cd6421ac2478cf47d6f27f23e8aefda2920a322e7cd5caefdf83bf42a3029013a83f6aff0102c5eddfe7e413cdd79a70ee1061a1a0b4154674aa773a6fb4a260973306b94be6202ba90acf43b2a0a633bd63f58e6b336d9f065aad998b31a75751d6420d2f03e791eb6a54334ab40d55a4ecf5625421036cc5c8d7f9b8062ae6ab4ac1f21635723b898b1c2a61d9b157fa56155e389fe71d972bcbbd3e018400de70e41beda289d84d32c8155f3998e2962429fc14e388c30d3be841d024169fe602b9c83bba490e254a24e81cbaccc507cd8f36402a8547dc80e319863ef226cbdc4c7453ced35699eec6628f9997647420d1dd8a07eecef5a44daae6ea034d91987c27a9d89dbd7c3bb09b341cc48a7ed91fb991034207b94d471d74430b5ffc9a8ab975f48148e79857590f880b7be200a11d94b784c6d2f9e68e186f7e11e34e2d345bf21d7fc33d4ea257524baaa5aaeb03954102d681ed6c948302a862069af7aec26747af98e606b2051af669e74fa79488786cd6b4c23b5dcdd3b0ba04621b3f90c43d0da46134a6947ad45032221a665368445dd299b82cdb0b61e75d41f88f3aef503d0d2d49b50c2df82581fb609def7e6bf2795018d4f869d95a7c3ec610f0213fcca595c3ca76620093580a9cb1a912f3d3ed4c8fa6055020d1009fe89faff4afdaed9f134481fad6f4053eae483b831347558154f4d61a1f695a6c1a66da7c3adee7fc0bafbec0447df569f790eb8eb4fd56fb1dd694198ad4a377211276bb0bffacb6af3b2ca668577f8d4affb1b52e5ebe9f3f920cc1f6f6093be818046ede4fe13cf1a1ece519cd40dd3ff8ec5c1188b32d01624d9ea8cea0f7855c3694939ff9ab0e17cc7aa8a7c41434f9560e46ca96fcc9eb4a39f63f868fb2791b253355d024d4b8ce4d45af5e588c509c25e2db2c19536d9ec1332e4366284a50754f0fc0a558d70a3584f2519beee954a995edee71ab11cc5657ee200a18c0fb326416e06c7f711ef8d71dd7f61e11c596aa7f3a8100cc6460cdc883f2229782e9f4521347f259d704c58df1949f5adfb7f6c8350caedde256bc7ee072938107e63b8ade9f91c2b4c9b74d692d4fe07d671b5c32a469e79b0a80a9b9e571bdc8c13aa99066ce6ff037a5380447269fb24d1f827d818560efe85eacae00d33d4b1e563be932b17e5183c37999481149730ffc9209458259a3255ce17cfcdff2f3b3d6eb726f7c300cda8028326986ec10871f7f066b1eaa9aff9722e56f0c45c95de543fe3c321264ec4b96c18a9e5a59914bdadf2d47d56096032a6332c01bc93577ea7fb7b6557f3cbf1035f09016ca407ba4db4271c0b28cf5a571eb30111cb789f1977d2f4c91508c0b24e2b3918c778d2bc496aaa5b627ec878cb4d07075c139ccee09d9ac923db327501f8df6a723d0b9ea66b672169ccfd5eb79b661447877463da5be45a71ff83c3b309b27ec0ddc29821aae82b05272c1d182bfd736869bbb6b3906271234844527ab9274bde6ee79f2a8f687b7a195f78c2beee67fcbecdac08d8397e87adebb85a57e5a6a3d3315788b5ca620f38c875085f4cb35ee05a000bbc1f58d9cccef730524ed90fd53388d64d146d07e30d106b852148edb4dc1aad404d028d26cbb73c025c1b0d6690538713833178ba161a7669c967a705c194b71e911b77f88561d0cb3b59773673154db22f8b6bd271034b2a0d934401cce85a3d677aa111cb7eb9c33f49</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。也许不一定是不可告人的东西?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 鲜花 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鲜花 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱搞记录</title>
      <link href="/2023/09/16/%E4%B9%B1%E6%90%9E%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/16/%E4%B9%B1%E6%90%9E%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="9-13"><a href="#9-13" class="headerlink" title="9.13"></a>9.13</h2><h3 id="P9591-「PFLOI-R1」PFL-变换"><a href="#P9591-「PFLOI-R1」PFL-变换" class="headerlink" title="P9591 「PFLOI R1」PFL 变换"></a>P9591 「PFLOI R1」PFL 变换</h3><p>做法：先初始一个解，然后随机两个元素交换，看看能不能达到目标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> bn[<span class="number">1000005</span>],n,m,t,a[<span class="number">1000005</span>],cur,sum;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">(<span class="number">102624</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8000</span>;++i)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">rd</span>()%m+<span class="number">1</span>,y=<span class="built_in">rd</span>()%(n-m)+m+<span class="number">1</span>;</span><br><span class="line">        sum^=a[x];sum^=a[y];</span><br><span class="line">        <span class="built_in">swap</span>(a[x],a[y]);</span><br><span class="line">        <span class="keyword">if</span>(sum==cur)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;++i)bn[i]=bn[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;bn[i<span class="number">-1</span>]==i);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=i;</span><br><span class="line">        cur=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=bn[n];++i)cur&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        --cur;sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)sum^=a[i];</span><br><span class="line">        <span class="keyword">if</span>(n==m)&#123;</span><br><span class="line">            <span class="type">int</span> s1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)s1^=i;</span><br><span class="line">            <span class="keyword">if</span>(s1!=cur)cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">70</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>())&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">goto</span> ed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">        ed:;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1198F-GCD-Groups-2"><a href="#CF1198F-GCD-Groups-2" class="headerlink" title="CF1198F GCD Groups 2"></a>CF1198F GCD Groups 2</h3><p>如果整个序列的GCD都不是1，直接输出不可以总司令就行了。</p><p>首先你发现一个很傻逼的性质是每个数只有最多2个有用，具体原因是因为一共两组，顶天一组一个。</p><p>所以你把那些出现次数多于2个的东西干成2个，然后随机一些序列跑贪心。</p><p>更具体地，你随一个序列，然后你贪心地选前面的数GCD起来直到它们的GCD是1，作为第一个序列；然后你去判断第二个序列的GCD是不是1就行了。</p><p>代码写的很答辩，轻喷。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> x,id;<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;r)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;r.x;&#125;&#125;a[<span class="number">100005</span>],d[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> n,b[<span class="number">100005</span>],c[<span class="number">100005</span>],m,e[<span class="number">100005</span>];</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;&#125;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp,mps;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;d[i].x,d[i].id=i,e[i]=c[i]=d[i].x;</span><br><span class="line">    <span class="built_in">sort</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i].x==d[i<span class="number">-1</span>].x&amp;&amp;d[i<span class="number">-1</span>].x==d[i<span class="number">-2</span>].x)<span class="keyword">continue</span>;</span><br><span class="line">        b[++m]=d[i].x;c[m]=d[i].id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;a[i].x=b[i];a[i].id=c[i];ans=<span class="built_in">gcd</span>(a[i].x,ans);&#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>);<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">1</span>)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.48</span>)&#123;</span><br><span class="line">        <span class="type">int</span> sl=<span class="number">0</span>,sr=<span class="number">0</span>,j=<span class="number">1</span>,id=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m&amp;&amp;sl!=<span class="number">1</span>;++j)sl=<span class="built_in">gcd</span>(sl,a[j].x);</span><br><span class="line">        id=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;=m;++j)sr=<span class="built_in">gcd</span>(sr,a[j].x);</span><br><span class="line">        <span class="keyword">if</span>(sl==<span class="number">1</span>&amp;&amp;sr==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=id;++j)mp[a[j].x]=<span class="number">1</span>,b[a[j].id]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=id+<span class="number">1</span>;j&lt;=m;++j)mp[a[j].x]=<span class="number">2</span>,b[a[j].id]=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(!b[j])b[j]=mp[e[j]];</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)cout&lt;&lt;b[j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">shuffle</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,rd);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P2210-Haywire"><a href="#P2210-Haywire" class="headerlink" title="P2210 Haywire"></a>P2210 Haywire</h3><p>和上题类似，考虑随一个序列贪心。</p><p>因为没有多测，为保证正确性，考虑卡时。</p><p>然后就没什么难的了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">25</span>][<span class="number">25</span>],b[<span class="number">1005</span>],g[<span class="number">25</span>][<span class="number">25</span>],ans=<span class="number">2e9</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;++j)&#123;<span class="type">int</span> x;cin&gt;&gt;x;a[i][x]=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)b[i]=i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.985</span>)&#123;</span><br><span class="line">        <span class="built_in">shuffle</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,rd);</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(a[b[i]][b[j]])cnt+=<span class="built_in">abs</span>(i-j);</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,cnt/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3878-TJOI2010-分金币"><a href="#P3878-TJOI2010-分金币" class="headerlink" title="P3878 [TJOI2010] 分金币"></a>P3878 [TJOI2010] 分金币</h3><p>爆搜剪枝即可。</p><h2 id="9-14"><a href="#9-14" class="headerlink" title="9.14"></a>9.14</h2><h3 id="P4212-外太空旅行"><a href="#P4212-外太空旅行" class="headerlink" title="P4212 外太空旅行"></a>P4212 外太空旅行</h3><p>随一个序列然后贪心即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">55</span>],v[<span class="number">55</span>][<span class="number">55</span>],cnt[<span class="number">55</span>],b[<span class="number">55</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)b[i]=i;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;x&gt;&gt;y)v[x][y]=v[y][x]=<span class="number">1</span>,++cnt[x],++cnt[y];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.985</span>)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; g;g.<span class="built_in">push_back</span>(b[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[b[i]]&lt;g.<span class="built_in">size</span>())<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:g)c+=v[b[i]][j];</span><br><span class="line">            <span class="keyword">if</span>(c==g.<span class="built_in">size</span>())g.<span class="built_in">push_back</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()&lt;g.<span class="built_in">size</span>())ans=g;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()==n)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">shuffle</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,rd);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P5911-POI2004-PRZ"><a href="#P5911-POI2004-PRZ" class="headerlink" title="P5911 [POI2004] PRZ"></a>P5911 [POI2004] PRZ</h3><p>分别按t和w升序和降序排序，然后贪心。</p><p>然后再随一些顺序贪心就过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll n,m,t[<span class="number">20</span>],w[<span class="number">20</span>],a[<span class="number">20</span>],ans=<span class="number">1234567921234576792ll</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> ll)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> t[x]&lt;t[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> t[x]&gt;t[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp3</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> w[x]&lt;w[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp4</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> w[x]&gt;w[y];&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll s=<span class="number">0</span>,k=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s+w[a[i]]&gt;m)&#123;k+=mx;s=w[a[i]];mx=t[a[i]];&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;s+=w[a[i]];mx=<span class="built_in">max</span>(mx,t[a[i]]);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;t[i]&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp3);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp4);ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.985</span>)&#123;ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>());<span class="built_in">shuffle</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,rd);&#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4220-WC2018-通道"><a href="#P4220-WC2018-通道" class="headerlink" title="P4220 [WC2018] 通道"></a>P4220 [WC2018] 通道</h3><p>这个稍微难一点。</p><p>你先把三棵树建出来，然后随一坨序列进行乱搞。</p><p>具体地，你先随一个序列，然后用平面最远点对的方法去迭代直到不能再优化答案。</p><p>然后这道题卡时一定要松一点(取3.9s)，因为你迭代一次要花好长好长的时间的，所以如果你卡的比较紧(例如3.975s左右)在洛谷上会T。</p><p>代码写的可答辩了，没办法，毕竟这题太难了，正解的前置知识都不会。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt;ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            d[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.9</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[a[rt]])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mp[a[rt]]&amp;&amp;!v[a[rt]])&#123;</span><br><span class="line">            mp[a[rt]]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(a[rt]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">                <span class="keyword">if</span>(s&lt;d[a[i]])s=d[a[i]],id=i;</span><br><span class="line">            v[a[rt]]=s;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,s);rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">shuffle</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,rd);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="upd-on-9-15-被LOJ的Hack数据打包了，现在来更新一下代码"><a href="#upd-on-9-15-被LOJ的Hack数据打包了，现在来更新一下代码" class="headerlink" title="upd on 9.15: 被LOJ的Hack数据打包了，现在来更新一下代码"></a>upd on 9.15: 被LOJ的Hack数据打包了，现在来更新一下代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],d2[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">ll dat[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt,vis[N];ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> da)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[x]+=dep[x]*da;d2[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y]&amp;&amp;!vis[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)i=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.25</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.5</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.8</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.1</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.4</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.6</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>&amp;&amp;<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.6</span>;++i)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[rt])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!mp[rt]&amp;&amp;!v[rt]&amp;&amp;++cn&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">3.9</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hack0：给每棵树带01权值多跑几遍就能救回来了。</p><p>Hack1&amp;Hack2：<del>bfs写挂了</del></p><p>纯傻逼。刷弱智题还卡那么久。</p><p>upd: 被uoj的hack数据打包了，现在又又又又过了，来加强一下代码。（调参调的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,rt,a[N],v[N];</span><br><span class="line">ll d[N],d2[N],ans;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line">ll dat[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">2</span>*N],cnt,vis[N];ll dep[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">    vector&lt;ll&gt; w[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,ll z)</span></span>&#123;</span><br><span class="line">        b[cnt+<span class="number">1</span>]=x;b[cnt+<span class="number">2</span>]=y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        w[x].<span class="built_in">push_back</span>(z);w[y].<span class="built_in">push_back</span>(z);cnt+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> da)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[x]+=dep[x]*da;d2[x]+=dep[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                <span class="type">int</span> &amp;y=g[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!dep[y]&amp;&amp;!vis[y])dep[y]=dep[x]+w[x][i],q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">3</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)i=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">0</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">1</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll u,v,w;cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        tr[<span class="number">2</span>].<span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.3</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.6</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">0.9</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">0</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.2</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">0</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.5</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">1.8</span>)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(++cn&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dat[<span class="number">0</span>]=<span class="number">1</span>;dat[<span class="number">1</span>]=<span class="number">1</span>;dat[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>&amp;&amp;<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&lt;=<span class="number">3.6</span>;++i)&#123;</span><br><span class="line">        rt=<span class="built_in">rd</span>()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(v[rt])++rt;</span><br><span class="line">        <span class="keyword">if</span>(rt&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> cn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!mp[rt]&amp;&amp;!v[rt]&amp;&amp;++cn&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            mp[rt]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">            <span class="built_in">memset</span>(d2,<span class="number">0</span>,<span class="keyword">sizeof</span> d2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)tr[i].<span class="built_in">init</span>(rt,dat[i]);</span><br><span class="line">            ll s=<span class="number">0</span>;<span class="type">int</span> id=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp[i]&amp;&amp;s&lt;d[i])s=d[i],id=i;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,d2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rt=id;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">3.9</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-24"><a href="#9-24" class="headerlink" title="9.24"></a>9.24</h2><p>他更新了。</p><h3 id="SCOI2010-连续攻击游戏"><a href="#SCOI2010-连续攻击游戏" class="headerlink" title="SCOI2010 连续攻击游戏"></a>SCOI2010 连续攻击游戏</h3><p>你按照x升序y降序排一遍序，按照x升序y升序再排一遍序，两遍一拼合，跑一个贪心就过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;r)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=r.x)<span class="keyword">return</span> x&lt;r.x;</span><br><span class="line">        <span class="keyword">return</span> y&gt;r.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x.x!=y.x)<span class="keyword">return</span> x.x&lt;y.x;</span><br><span class="line">    <span class="keyword">return</span> x.y&lt;y.y;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;node&gt; v;</span><br><span class="line"><span class="type">bool</span> buc[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        node x;cin&gt;&gt;x.x&gt;&gt;x.y;</span><br><span class="line">        <span class="keyword">if</span>(x.x&gt;x.y)<span class="built_in">swap</span>(x.x,x.y);</span><br><span class="line">        v.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!buc[v[i].x])buc[v[i].x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> buc[v[i].y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(buc[++tot])&#123;&#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,tot<span class="number">-1</span>);tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(buc,<span class="number">0</span>,<span class="keyword">sizeof</span> buc);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!buc[v[i].x])buc[v[i].x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> buc[v[i].y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(buc[++tot])&#123;&#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,tot<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Topcoder-TPS"><a href="#Topcoder-TPS" class="headerlink" title="Topcoder TPS"></a>Topcoder TPS</h3><p>首先有一个很傻逼的结论：只有叶子节点可能放，证明显然。<br>所以你把叶子节点全拎出来，二分答案，判断就随一万遍随机顺序放置TPS。然后每次暴力判断就过了。<br>时间复杂度：$O(Tn^3 \log n)$，但是可以过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">65</span>];</span><br><span class="line"><span class="type">int</span> n,vis[<span class="number">55</span>],one[<span class="number">105</span>],tot,ch[<span class="number">51</span>],g[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; d[<span class="number">65</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check2</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)d[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=mid;++j)&#123;</span><br><span class="line">            d[i].<span class="built_in">push_back</span>(g[i][ch[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=mid;++k)</span><br><span class="line">                s+=d[i][k<span class="number">-1</span>]==d[j][k<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(s==mid)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=mid;++j)&#123;</span><br><span class="line">            <span class="type">int</span> t=<span class="built_in">rand</span>()%tot+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(vis[t])t=<span class="built_in">rand</span>()%tot+<span class="number">1</span>;</span><br><span class="line">            ch[j]=one[t];vis[t]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check2</span>(mid))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;TPS.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;TPS.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">10007</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;0\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        g[i][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">char</span> c;cin&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                v[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                g[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                g[i][j]=<span class="built_in">min</span>(g[i][j],g[i][k]+g[k][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(v[i].<span class="built_in">size</span>()==<span class="number">1</span>)one[++tot]=i;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=tot;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-图形排版"><a href="#蓝桥杯-图形排版" class="headerlink" title="蓝桥杯 图形排版"></a>蓝桥杯 图形排版</h3><p>随一个顺序然后卡时跑暴力即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,id;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line">vector&lt;node&gt; b[<span class="number">100005</span>],c[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpx</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x&lt;y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpy</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.y&lt;y.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">(<span class="number">43678902</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> n,m,len[<span class="number">105</span>],cnt=<span class="number">1</span>,id[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> banid)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)c[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> t=<span class="number">1</span>,mx=<span class="number">0</span>,now=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==banid)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i].x&lt;=now)&#123;</span><br><span class="line">            c[t].<span class="built_in">push_back</span>(a[i]),mx=<span class="built_in">max</span>(mx,<span class="number">1ll</span>*a[i].y),now-=a[i].x;</span><br><span class="line">            <span class="keyword">if</span>(!now)res+=mx,mx=<span class="number">0</span>,++t,now=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> le=a[i].x-now;</span><br><span class="line">            <span class="keyword">auto</span> tmp=a[i];</span><br><span class="line">            tmp.x=le;tmp.y=(<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span>*tmp.y*now/a[i].x);</span><br><span class="line">            mx=<span class="built_in">max</span>(mx,<span class="number">1ll</span>*tmp.y);</span><br><span class="line">            c[t].<span class="built_in">push_back</span>(tmp);++t;res+=mx;mx=<span class="number">0</span>;now=m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mx)res+=mx;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i].x&gt;&gt;a[i].y,a[i].id=i;</span><br><span class="line">    <span class="type">int</span> now=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].x&lt;=now)&#123;</span><br><span class="line">            b[cnt].<span class="built_in">push_back</span>(a[i]);now-=a[i].x;</span><br><span class="line">            <span class="keyword">if</span>(!now)++cnt,now=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> le=a[i].x-now;</span><br><span class="line">            <span class="keyword">auto</span> tmp=a[i];</span><br><span class="line">            tmp.x=le;tmp.y=(<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span>*tmp.y*now/a[i].x);</span><br><span class="line">            b[cnt].<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            ++cnt;now=m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!b[cnt].<span class="built_in">size</span>())--cnt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=<span class="number">1e17</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)id[i]=i;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">50000</span>)<span class="built_in">shuffle</span>(id+<span class="number">1</span>,id+n+<span class="number">1</span>,rd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">1.98</span>)<span class="keyword">break</span>;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,<span class="built_in">calc</span>(id[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF338D-GCD-Table"><a href="#CF338D-GCD-Table" class="headerlink" title="CF338D GCD Table"></a>CF338D GCD Table</h3><p>正解ExCRT，但是不想写。</p><p>考虑做一坨特判：</p><p>1、如果k&gt;m，显然不行。</p><p>2、如果a数组的最小公倍数比n大，那显然也不行。</p><p>3、如果a数组有比m大的值，那肯定也不行。</p><p>4、其他看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lll __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> itn int</span></span><br><span class="line">ll n,m,k;</span><br><span class="line">lll a[<span class="number">100005</span>];</span><br><span class="line"><span class="function">lll <span class="title">lcm</span><span class="params">(lll a,lll b)</span></span>&#123;<span class="keyword">return</span> a/__gcd(a,b)*b;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;lll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// if(m&gt;=1e11&amp;&amp;m&lt;=5e11&amp;&amp;k&lt;=5)&#123;cout&lt;&lt;&quot;NO\n&quot;;return 0;&#125;</span></span><br><span class="line">    <span class="keyword">if</span>(k&gt;m)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        ll x;cin&gt;&gt;x;a[i]=x;ans=<span class="built_in">lcm</span>(ans,a[i]);</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a[i],a[i<span class="number">-1</span>])!=<span class="number">1</span>)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(ans&gt;(lll)n)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;(lll)m)&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;k)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i;j&gt;=<span class="number">1</span>;j-=a[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]%a[i])&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i;j&lt;=k;j+=a[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]%a[i])&#123;cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">991234567890 182000001269 5</span></span><br><span class="line"><span class="comment">6 11 8 3 2000000014</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="USACO2008-Cow-Neighbourhoods"><a href="#USACO2008-Cow-Neighbourhoods" class="headerlink" title="USACO2008 Cow Neighbourhoods"></a>USACO2008 Cow Neighbourhoods</h3><p>按照x坐标排序，然后对于每个点查他后面2750个点就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll n,c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">&#125;a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node x,node y)</span></span>&#123;<span class="keyword">return</span> x.x*x.y&lt;y.x*y.y;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(node x,node y)</span></span>&#123;<span class="keyword">return</span> x.x&lt;y.x;&#125;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">100005</span>],buc[<span class="number">100005</span>],rk[<span class="number">100005</span>];</span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> fa[x];</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unit</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(rk[x]&lt;rk[y])fa[x]=y;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        fa[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(rk[x]==rk[y])rk[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="built_in">min</span>((ll)i+<span class="number">2700</span>,n);++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i].x-a[j].x)+<span class="built_in">abs</span>(a[i].y-a[j].y)&lt;=c)<span class="built_in">unit</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC&gt;=<span class="number">0.975</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!buc[<span class="built_in">find</span>(i)])ans2++;</span><br><span class="line">        buc[<span class="built_in">find</span>(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> s2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s2=<span class="built_in">max</span>(s2,buc[i]);</span><br><span class="line">    cout&lt;&lt;ans2&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;s2&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P7999"><a href="#P7999" class="headerlink" title="P7999"></a>P7999</h3><p>令m&#x3D;不超过 $\lfloor \frac{n}{2} \rfloor$ 的最大奇数。</p><p>对前一半 $(1~\lfloor \frac{n}{2} \rfloor)$，首先用m+1的反转归位，到了当前位置离目标位置小于 $m+1$ 的时候，把他反转到目标 $+m$ 的位置。</p><p>对于后半部分，考虑交换任意 $u$ 和 $v$ 的位置。</p><p>你考虑同时操作 $m+1$ 和 $m-1$ 可以仅交换 $i$ 和 $i+m$ 位置上的值。</p><p>所以，当 $v$ 不等于 $u+m$ 的时候，先把他扔到 $[u,u+m]$ 里，如果他俩奇偶性不同，则执行一次交换让他俩奇偶性相同。</p><p>然后，你就直接找到一个中点反转，就能归位了。</p><p><del>题解做法好像反过来了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">1005</span>],cnt;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;b[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="type">int</span> m=n/<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(m&amp;<span class="number">1</span>))--m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i*<span class="number">2</span>&lt;=n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;n&amp;&amp;a[j]!=i)++j;</span><br><span class="line">            <span class="keyword">while</span>(j-m&gt;=i)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j-m,a+j+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j-m,j&#125;;j-=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> l=i,r=i+m;</span><br><span class="line">            <span class="keyword">if</span>((l-j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j,a+j+m+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j,j+m&#125;;j+=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">reverse</span>(a+(r+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,a+(r+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;(r+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,(r+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+r-m,a+r+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;r-m,r&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=n/<span class="number">2</span>+<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">1</span>&amp;&amp;a[j]!=i)--j;</span><br><span class="line">            <span class="keyword">while</span>(j+m&lt;=i)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j,a+j+m+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j,j+m&#125;;j+=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> l=i-m,r=i,t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>((r-j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j-m,a+j+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j-m,j&#125;;j-=m;t=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">reverse</span>(a+(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,a+(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+l,a+l+m+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;l,l+m&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+l+<span class="number">1</span>,a+l+m);</span><br><span class="line">            b[++cnt]=&#123;l+<span class="number">1</span>,l+m<span class="number">-1</span>&#125;;</span><br><span class="line">            <span class="built_in">reverse</span>(a+(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,a+(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            b[++cnt]=&#123;(l+j)/<span class="number">2</span>-(m+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>,(l+j)/<span class="number">2</span>+(m+<span class="number">1</span>)/<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(t)<span class="built_in">reverse</span>(a+j,a+j+m+<span class="number">1</span>),b[++cnt]=&#123;j,j+m&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)cout&lt;&lt;b[i].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b[i].second&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=i)&#123;</span><br><span class="line">            <span class="type">int</span> id=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(a[j]==i)&#123;id=j;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="type">int</span> j=id;</span><br><span class="line">            <span class="keyword">for</span>(j=id;j&gt;=i+<span class="number">3</span>;j-=<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(a+j<span class="number">-3</span>,a+j+<span class="number">1</span>);</span><br><span class="line">                b[++cnt]=&#123;j<span class="number">-3</span>,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;j&gt;i;--j)&#123;</span><br><span class="line">                b[++cnt]=&#123;j<span class="number">-1</span>,j&#125;;</span><br><span class="line">                <span class="built_in">swap</span>(a[j<span class="number">-1</span>],a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)cout&lt;&lt;b[i].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b[i].second&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-30"><a href="#9-30" class="headerlink" title="9.30"></a>9.30</h2><h3 id="P1452-USACO03FALL-Beauty-Contest-G"><a href="#P1452-USACO03FALL-Beauty-Contest-G" class="headerlink" title="P1452 [USACO03FALL] Beauty Contest G"></a>P1452 [USACO03FALL] Beauty Contest G</h3><p>旋转卡壳板子（平面最近点对）。随便乱做就能过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-8</span>,PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">double</span> u=<span class="number">0.0</span>,<span class="type">double</span> v=<span class="number">0.0</span>):x&#123;u&#125;,y&#123;v&#125;&#123;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(point r)&#123;<span class="keyword">return</span> <span class="built_in">point</span>(x+r.x,y+r.y);&#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(point r)&#123;<span class="keyword">return</span> <span class="built_in">point</span>(x-r.x,y-r.y);&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>^(<span class="type">const</span> point &amp;b)<span class="type">const</span>&#123;<span class="keyword">return</span> x*b.y-y*b.x;&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>*(<span class="type">const</span> point &amp;b)<span class="type">const</span>&#123;<span class="keyword">return</span> x*b.x+y*b.y;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="type">double</span> a)&#123;<span class="keyword">return</span> <span class="built_in">point</span>(x/a,y/a);&#125;</span><br><span class="line">    point &amp;<span class="keyword">operator</span>=(point r)&#123;x=r.x,y=r.y;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">norm</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> x*x+y*y;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">abs</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (<span class="built_in">norm</span>());&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> point &amp;r)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x!=r.x?x&lt;r.x:y&lt;r.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> point &amp;r)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(x-r.x)&lt;eps&amp;&amp;<span class="built_in">fabs</span>(y-r.y)&lt;eps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trans</span><span class="params">(<span class="type">double</span> b)</span></span>&#123;<span class="type">double</span> tx=x,ty=y;x=tx*<span class="built_in">cos</span>(b)-ty*<span class="built_in">sin</span>(b);y=tx*<span class="built_in">sin</span>(b)+ty*<span class="built_in">cos</span>(b);&#125;</span><br><span class="line">&#125;a[<span class="number">1000010</span>],b[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(point a,point b,point c)</span></span>&#123;<span class="keyword">return</span>((c^a)&gt;=<span class="number">0</span>&amp;&amp;(b^c)&gt;=<span class="number">0</span>&amp;&amp;((a-b)^(c-b))&gt;=<span class="number">0</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;<span class="keyword">return</span> a.x!=b.x?a.x&lt;b.x:a.y&lt;b.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;<span class="keyword">return</span> (a^b)==<span class="number">0</span>?(a*a)&lt;(b*b):(a^b)&gt;<span class="number">0</span>;&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">polarsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)a[i]=a[i]-a[<span class="number">1</span>];</span><br><span class="line">    a[<span class="number">1</span>].x=a[<span class="number">1</span>].y=<span class="number">0</span>;<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hull</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">polarsort</span>();</span><br><span class="line">    b[<span class="number">1</span>]=a[<span class="number">1</span>];b[<span class="number">2</span>]=a[<span class="number">2</span>];b[<span class="number">3</span>]=a[<span class="number">3</span>];m=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">4</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">check</span>(a[i],b[m<span class="number">-1</span>],b[m])&amp;&amp;m&gt;<span class="number">2</span>)--m;</span><br><span class="line">        b[++m]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*a.x+a.y*a.y&lt;b.x*b.x+b.y*b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">disx</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b[x].x-b[y].x)*(b[x].x-b[y].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">disy</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b[x].y-b[y].y)*(b[x].y-b[y].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis2x</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a[x].x-a[y].x)*(a[x].x-a[y].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis2y</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a[x].y-a[y].y)*(a[x].y-a[y].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis2x</span>(x,y)+<span class="built_in">dis2y</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">disx</span>(x,y)+<span class="built_in">disy</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> K1=<span class="number">1e8</span>,K2=<span class="number">1e18</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">dl1</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">dl2</span><span class="params">(<span class="type">const</span> point &amp;a,<span class="type">const</span> point &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">    <span class="built_in">hull</span>();</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> z[<span class="number">9</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sz[<span class="number">9</span>]=&#123;<span class="number">0</span>,K1,K1,-K1,-K1,K1,-K1,K2,-K2&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">1</span>]&gt;b[i].x)sz[<span class="number">1</span>]=b[i].x,z[<span class="number">1</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">2</span>]&gt;b[i].y)sz[<span class="number">2</span>]=b[i].y,z[<span class="number">2</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">3</span>]&lt;b[i].x)sz[<span class="number">3</span>]=b[i].x,z[<span class="number">3</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">4</span>]&lt;b[i].y)sz[<span class="number">4</span>]=b[i].y,z[<span class="number">4</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">5</span>]&gt;b[i].x+b[i].y)sz[<span class="number">5</span>]=b[i].x+b[i].y,z[<span class="number">5</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">6</span>]&lt;b[i].x+b[i].y)sz[<span class="number">6</span>]=b[i].x+b[i].y,z[<span class="number">6</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;<span class="built_in">i</span>&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">7</span>]&gt;(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y)sz[<span class="number">7</span>]=(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y,z[<span class="number">7</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span>(sz[<span class="number">8</span>]&lt;(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y)sz[<span class="number">8</span>]=(<span class="type">long</span> <span class="type">long</span>)<span class="number">1ll</span>*b[i].x*b[i].y,z[<span class="number">8</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=i+<span class="number">70</span>&amp;&amp;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=n;j&gt;=n<span class="number">-70</span>&amp;&amp;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">70</span>&amp;&amp;j&lt;=n;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;++j)ans=<span class="built_in">max</span>(ans,<span class="built_in">sqrt</span>(<span class="built_in">dis</span>(i,z[j])));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=i+<span class="number">160</span>&amp;&amp;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=m;j&gt;=m<span class="number">-160</span>&amp;&amp;j&gt;=<span class="number">1</span>;--j)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">160</span>&amp;&amp;j&lt;=m;++j)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,j));</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;t)x=i,y=j,ans=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,x)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,y)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;++j)ans=<span class="built_in">max</span>(ans,(<span class="built_in">dis</span>(i,z[j])));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> times=<span class="number">1</span>;times&lt;=<span class="number">72</span>&amp;&amp;(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC)&lt;=<span class="number">0.985</span>;++times)&#123;</span><br><span class="line">        <span class="type">double</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;(<span class="number">1.0</span>*<span class="built_in">clock</span>()/CLOCKS_PER_SEC)&lt;=<span class="number">0.99</span>;++i)&#123;</span><br><span class="line">            <span class="type">double</span> t=(<span class="built_in">dis</span>(i,x));</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;t)y=i,tmp=t;</span><br><span class="line">        &#125;</span><br><span class="line">        x=y;ans=<span class="built_in">max</span>(ans,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>骗分方法</title>
      <link href="/2023/09/10/%E9%AA%97%E5%88%86%E6%96%B9%E6%B3%95/"/>
      <url>/2023/09/10/%E9%AA%97%E5%88%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="骗分方法"><a href="#骗分方法" class="headerlink" title="骗分方法"></a>骗分方法</h1><h3 id="1、输出样例"><a href="#1、输出样例" class="headerlink" title="1、输出样例"></a>1、输出样例</h3><h3 id="2、特殊情况"><a href="#2、特殊情况" class="headerlink" title="2、特殊情况"></a>2、特殊情况</h3><h3 id="3、随机数"><a href="#3、随机数" class="headerlink" title="3、随机数"></a>3、随机数</h3><h3 id="4、卡时"><a href="#4、卡时" class="headerlink" title="4、卡时"></a>4、卡时</h3><h3 id="5、爆搜剪枝"><a href="#5、爆搜剪枝" class="headerlink" title="5、爆搜剪枝"></a>5、爆搜剪枝</h3><h3 id="6、打表"><a href="#6、打表" class="headerlink" title="6、打表"></a>6、打表</h3><h3 id="7、找规律"><a href="#7、找规律" class="headerlink" title="7、找规律"></a>7、找规律</h3><h3 id="8、随机化算法"><a href="#8、随机化算法" class="headerlink" title="8、随机化算法"></a>8、随机化算法</h3><h3 id="9、假做法"><a href="#9、假做法" class="headerlink" title="9、假做法"></a>9、假做法</h3><h3 id="10、一般情况"><a href="#10、一般情况" class="headerlink" title="10、一般情况"></a>10、一般情况</h3>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平面最近点对</title>
      <link href="/2023/09/10/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/"/>
      <url>/2023/09/10/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="平面最近点对的许多奇奇怪怪的做法"><a href="#平面最近点对的许多奇奇怪怪的做法" class="headerlink" title="平面最近点对的许多奇奇怪怪的做法"></a>平面最近点对的许多奇奇怪怪的做法</h1><h3 id="1、正常人的想法"><a href="#1、正常人的想法" class="headerlink" title="1、正常人的想法"></a>1、正常人的想法</h3><h4 id="法一：暴力"><a href="#法一：暴力" class="headerlink" title="法一：暴力"></a>法一：暴力</h4><p>最直接、最简单的方法，虽然往往拿不到分。</p><h4 id="法二：分治法1"><a href="#法二：分治法1" class="headerlink" title="法二：分治法1"></a>法二：分治法1</h4><p>考虑把所有的点按x排序。然后你考虑每次把他们分成一半，这样就被拆成了三个部分：</p><p>1、左边区间内部</p><p>2、右边区间内部</p><p>3、跨过了分治的分界线</p><p>因为1和2的情况可以被递归解决，所以重点说明3怎么做</p><p>你考虑先递归出1和2的答案，设为 $d$ 。</p><p>对于跨过分界线的答案，考虑每一个点和分界线的距离，那我们就不需要考虑距离比 $d$ 还要远的点了。</p><p>把满足条件的记下来，然后按 $y$ 坐标递增排序。</p><p>然后对于每一个点，暴力往后查找最近点对，如果 $y$ 坐标的差都大于 $d$ 了，就可以去统计下一个点的答案了。</p><p>注意这个时候也要实时更新 $d$。</p><p>时间复杂度 $O(n \log^2 n)$ ，复杂度瓶颈在于分治中间的按y坐标排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span>==r)<span class="keyword">return</span> <span class="built_in">dis</span>(p[l],p[r]);</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> d=<span class="built_in">min</span>(<span class="built_in">calc</span>(l,mid),<span class="built_in">calc</span>(mid+<span class="number">1</span>,r));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(p[i].x-p[mid].x)&lt;=d)t[++cnt]=p[i];</span><br><span class="line"><span class="built_in">sort</span>(t+<span class="number">1</span>,t+cnt+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=cnt&amp;&amp;t[j].y-t[i].y&lt;=d;++j)d=<span class="built_in">min</span>(d,<span class="built_in">dis</span>(t[i],t[j]));</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="法三：分治2"><a href="#法三：分治2" class="headerlink" title="法三：分治2"></a>法三：分治2</h4><p>考虑优化分治1的瓶颈，发现只要做一个类似归并的过程即可。复杂度降为 $O(n \log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> inf;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;ll midx=p[mid].x;</span><br><span class="line"><span class="type">double</span> d=<span class="built_in">min</span>(<span class="built_in">calc</span>(l,mid),<span class="built_in">calc</span>(mid+<span class="number">1</span>,r));</span><br><span class="line"><span class="type">int</span> pl=l,pr=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(pl&lt;=mid||pr&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(pl&lt;=mid&amp;&amp;(pr&gt;r||p[pl].y&lt;p[pr].y))t[++cnt]=p[pl++];</span><br><span class="line"><span class="keyword">else</span> t[++cnt]=p[pr++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)p[l+i<span class="number">-1</span>]=t[i];</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(p[i].x-midx)&lt;=d)t[++cnt]=p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=cnt&amp;&amp;t[j].y-t[i].y&lt;=d;++j)d=<span class="built_in">min</span>(d,<span class="built_in">dis</span>(t[i],t[j]));</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="法四：set"><a href="#法四：set" class="headerlink" title="法四：set"></a>法四：set</h4><p>这里参考了 OI Wiki 的讲解</p><p>我们考虑对于每一个元素，将它和它的左边所有元素的贡献加入到答案中。</p><p>把所有点按照 $x$ 为第一关键字、 $y$ 为第二关键字排序，并建立一个以   $y$ 为第一关键字、 $x$ 为第二关键字排序的 multiset。对于每一个位置，我们执行以下操作：</p><p>将所有满足 $x_i-x_j\geq d$ 的点从集合中删除。它们不会再对答案有贡献。</p><p>对于集合内满足  $  \lvert y_i-y_j \rvert &lt;d $ 的所有点，统计它们和   $p_i$ 的距离。</p><p>将 $p_i$ 插入到集合中。</p><p>由于每个点最多会被插入和删除一次，所以插入和删除点的时间复杂度为<br> $O(n \log n)$</p><p><strong><del>代码咕着</del></strong></p><h3 id="2、不正常的人想出来的办法！"><a href="#2、不正常的人想出来的办法！" class="headerlink" title="2、不正常的人想出来的办法！"></a>2、不正常的人想出来的办法！</h3><p><strong>声明：以下内容绝大多数都是原创，如果有类似的想法但是提出的比我早，那就是你比我早想出来的，但我确实是自己想的，不是原创的话我会标出来</strong></p><h4 id="1、近似排序"><a href="#1、近似排序" class="headerlink" title="1、近似排序"></a>1、近似排序</h4><p>我们考虑一个事实，如果我们把所有的点按照 $x*y+x+y$ 排序，那么下标意义上距离这些点很近的点，大多数在真实空间内距离也很近。</p><p><del>感性理解一下</del></p><p>实在不行可以加随机偏移，比如把 $x$ 和 $y$ 全都加上一个1e7之类的东西来减小负数等极端情况带来的影响</p><p>然后在暴力比较的时候，根据我们之前的事实，可以只往后比较一些点，不需要比较到头，因为这样大概率不优。</p><p>参考代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> x,y;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> node&amp;t)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span>(x+<span class="number">102624</span>)*(y+<span class="number">102624</span>)&gt;(t.x+<span class="number">102624</span>)*(t.y+<span class="number">102624</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in main()</span></span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="built_in">min</span>(i+<span class="number">233</span>,n);j++)</span><br><span class="line">ans=<span class="built_in">min</span>(ans,(<span class="type">long</span> <span class="type">long</span>)((a[i].x-a[j].x)*(a[i].x-a[j].x)+eps+(a[i].y-a[j].y)*(a[i].y-a[j].y)+eps));</span><br></pre></td></tr></table></figure><h4 id="2、随机旋转（非原创）"><a href="#2、随机旋转（非原创）" class="headerlink" title="2、随机旋转（非原创）"></a>2、随机旋转（非原创）</h4><p>这个算法是参考了某人的题解</p><p>把所有的点随机旋转同一个角度。这个优化的好处是可以冲过一些坐标类hack数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="keyword">new</span> <span class="type">char</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> theta=<span class="built_in">rd</span>()%<span class="number">1000</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> w=<span class="built_in">sin</span>(theta),c=<span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ax,ay;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;ax,&amp;ay);</span><br><span class="line">a[i].x=<span class="number">1.0</span>*ax*c<span class="number">-1.0</span>*ay*w;</span><br><span class="line">a[i].y=<span class="number">1.0</span>*ax*w+<span class="number">1.0</span>*ay*c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、极值点法"><a href="#3、极值点法" class="headerlink" title="3、极值点法"></a>3、极值点法</h4><p>这个方法貌似没什么人想到（</p><p>具体来说，你考虑找出 $x$ 、 $y$ 、$x*y$ 、 $x^2+y^2$ 从小到大的中间几个点，然后对它们做暴力查找查满。</p><h4 id="4、自动优化法"><a href="#4、自动优化法" class="headerlink" title="4、自动优化法"></a>4、自动优化法</h4><p>首先随机选取一个起始点，找出包括那个点的答案，然后再把起始点设为答案继续找。如果你发现离 $a$ 的最近点是 $b$ ，离 $b$ 的最近点又是 $a$ ，这时你应该重新随机一个点继续执行算法。</p><p>（目前只想到了那么多…我还是太菜了</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四毛子算法学习笔记</title>
      <link href="/2023/09/10/%E5%9B%9B%E6%AF%9B%E5%AD%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/10/%E5%9B%9B%E6%AF%9B%E5%AD%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>“***，你会四毛子算法吗？不会的话就去学会，给同学们讲讲”</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>四毛子算法 (Four Russian) 是一个由四位俄罗斯人<del>毛子</del>提出的一种可以在 $O(n \log \log n) - O(1)$ 复杂度内解决RMQ问题的算法。</p><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><p>首先把序列分块，对于每块内部维护一个ST表，对于不同的块之间再维护一个ST表。</p><p>每次查询一个 $[l,r]$ 的时候:</p><p>假设l所在的区间为 $[l_1,r_1]$ ，r所在的区间为 $[l_2,r_2]$。</p><p>若l和r处于同一块内，直接查询块内的ST表即可。</p><p>若l和r处于相邻块内，则直接查询 $[l,r_1]$ 和 $[l_2,r]$ 的最小值即可。</p><p>否则，我们把区间 $[l,r]$ 分成三段：</p><p>1: $[l,r_1]$</p><p>2: $[r_1+1,l_2-1]$</p><p>3: $[l_2,r]$</p><p>其中第二个区间直接查询不同块之间的ST表，第一个和第三个区间块内查询即可。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>查询复杂度显然为 $O(1)$。</p><p>设块长为k，则有预处理复杂度：</p><p>$$O(\frac{n}{k} \log \frac{n}{k}+n \log k)$$</p><p>我们取 $k&#x3D;\log n$ ，就得到了复杂度 $O(n \log \log n)$ 。</p><p>空间复杂度也为 $O(n \log \log n)$ 。</p><h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><p>我们发现原版四毛子算法的常数非常大，因为每次询问可能要跑3个ST表。</p><p>考虑改进这个过程。我们发现块内查询相当于查询前缀&#x2F;后缀最小值，所以我们在预处理的过程中，对于每个块暴力预处理出它们的前缀和后缀min。这样询问只需要跑一个ST表，常数大大减小。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>真不难写(逃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,blo,tot,lc[<span class="number">1000005</span>],rc[<span class="number">1000005</span>],bel[<span class="number">1000005</span>],a[<span class="number">1000005</span>],log1[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log1[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;++i)log1[i]=log1[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    blo=log1[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i*blo&lt;=n;++i)lc[++tot]=blo*(i<span class="number">-1</span>)+<span class="number">1</span>,rc[tot]=blo*i;</span><br><span class="line">    <span class="keyword">if</span>(n%blo)&#123;</span><br><span class="line">        <span class="type">int</span> tmp=n/blo;</span><br><span class="line">        lc[++tot]=tmp*blo+<span class="number">1</span>,rc[tot]=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=lc[i];j&lt;=rc[i];++j)bel[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stable</span>&#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">18</span>][<span class="number">18</span>],lf[<span class="number">18</span>],rf[<span class="number">18</span>],len;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        len=r-l+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(lf,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> lf);</span><br><span class="line">        <span class="built_in">memset</span>(rf,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> rf);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)f[i][<span class="number">0</span>]=a[l+i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)lf[i]=<span class="built_in">min</span>(lf[i<span class="number">-1</span>],f[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;=<span class="number">1</span>;--i)rf[i]=<span class="built_in">min</span>(rf[i+<span class="number">1</span>],f[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askm</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=log1[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(f[l][x],f[r-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askl</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> lf[r];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">askr</span><span class="params">(<span class="type">int</span> l)</span></span>&#123;<span class="keyword">return</span> rf[l];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">1</span>||r&gt;len||l&gt;r)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">1</span>)<span class="keyword">return</span> <span class="built_in">askl</span>(r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r==len)<span class="keyword">return</span> <span class="built_in">askr</span>(l);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">askm</span>(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st_table</span>&#123;</span><br><span class="line">    stable s[<span class="number">100005</span>];</span><br><span class="line">    <span class="type">int</span> len,f[<span class="number">100005</span>][<span class="number">25</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        len=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)s[i].<span class="built_in">init</span>(lc[i],rc[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)f[i][<span class="number">0</span>]=s[i].<span class="built_in">ask</span>(<span class="number">1</span>,s[i].len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=len;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=bel[l],y=bel[r],z=log1[y-x<span class="number">-1</span>],ansl=<span class="number">1e9</span>,ansr;</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">return</span> s[x].<span class="built_in">ask</span>(l-lc[x]+<span class="number">1</span>,r-lc[x]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(x!=y<span class="number">-1</span>)ansl=<span class="built_in">min</span>(f[x+<span class="number">1</span>][z],f[y-(<span class="number">1</span>&lt;&lt;z)][z]);</span><br><span class="line">        ansr=<span class="built_in">min</span>(s[x].<span class="built_in">ask</span>(l+s[x].len-rc[x],s[x].len),s[y].<span class="built_in">ask</span>(<span class="number">1</span>,r-lc[y]+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(ansl,ansr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    s.<span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        cout&lt;&lt;s.<span class="built_in">ask</span>(l,r)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>请注意，该四毛子算法常数仍然巨大，不保证可以通过模板题(但是loj的过了而且比ST表快</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我会且仅会的东西</title>
      <link href="/2023/09/10/%E6%88%91%E4%BC%9A%E4%B8%94%E4%BB%85%E4%BC%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>/2023/09/10/%E6%88%91%E4%BC%9A%E4%B8%94%E4%BB%85%E4%BC%9A%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>1、<strong>最基础的</strong>骗分方法</p><p>2、<strong>最基础、最低效、最低正确率的</strong>乱搞方法</p><p>3、<strong>最低效的</strong>打表方法</p><p>4、<strong>最龟速的</strong>找规律方法</p><p>5、<strong>笨得甚至不像黑科技的</strong>科技</p><p>6、摆摆摆</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发电站，还有Chaoswither</title>
      <link href="/2023/09/10/%E5%8F%91%E7%94%B5%E7%AB%99%EF%BC%8C%E8%BF%98%E6%9C%89Chaoswither/"/>
      <url>/2023/09/10/%E5%8F%91%E7%94%B5%E7%AB%99%EF%BC%8C%E8%BF%98%E6%9C%89Chaoswither/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b917767489f8320156cae6b644359a3b955f3647ab8c60c263463a63820cf363"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被站长加密了，需要输入密码。它本来就不是给人看的，所以请放弃破解吧。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> GOD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/2023/09/10/about/"/>
      <url>/2023/09/10/about/</url>
      
        <content type="html"><![CDATA[<p><del><strong>站长是个发电机！</strong></del></p><p>站长刚搭好的博客。(on 2023&#x2F;8&#x2F;27)</p><p>会放一些平时没有的发电内容。如果你真的通过搜索找到了这里，那你很厉害<del>这意味着你可以浪费时间看我发电了</del>。</p><p>一般来说个人博客的内容严格多于<a href="luogu.com.cn/blog/JZX102624">洛谷博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> info </category>
          
      </categories>
      
      
        <tags>
            
            <tag> info </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
